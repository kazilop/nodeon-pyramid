#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
"""

import os
import json
import requests
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY')

def check_table_exists(table_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã"""
    
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        return False, "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        url = f"{SUPABASE_URL}/rest/v1/{table_name}?select=count"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            return True, "–¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        elif response.status_code == 404:
            return False, "–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        else:
            return False, f"–û—à–∏–±–∫–∞: {response.status_code} - {response.text}"
            
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"

def get_table_stats(table_name):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
    
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        return None
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        url = f"{SUPABASE_URL}/rest/v1/{table_name}?select=count"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            sample_url = f"{SUPABASE_URL}/rest/v1/{table_name}?select=*&limit=5"
            sample_response = requests.get(sample_url, headers=headers)
            
            stats = {
                "exists": True,
                "count": len(sample_response.json()) if sample_response.status_code == 200 else 0,
                "sample_data": sample_response.json()[:3] if sample_response.status_code == 200 else []
            }
            
            return stats
        else:
            return {"exists": False, "error": f"{response.status_code} - {response.text}"}
            
    except Exception as e:
        return {"exists": False, "error": str(e)}

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPABASE_URL –∏ SUPABASE_ANON_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        url = f"{SUPABASE_URL}/rest/v1/"
        response = requests.get(url, headers=headers, timeout=10)
        
        if response.status_code in [200, 404]:  # 404 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

def check_all_tables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("\\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–µ–∫—Ç–∞
    tables = [
        "nodeon_users",
        "nodeon_transactions", 
        "nodeon_referral_stats",
        "nodeon_miner_data",
        "nodeon_miner_stats",
        "nodeon_miner_farms",
        "nodeon_miner_upgrades",
        "nodeon_miner_transactions",
        "nodeon_achievements",
        "nodeon_shops"
    ]
    
    results = {}
    
    for table in tables:
        print(f"\\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {table}")
        
        exists, message = check_table_exists(table)
        print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if exists else '‚ùå'} {message}")
        
        if exists:
            stats = get_table_stats(table)
            if stats and stats.get("exists"):
                print(f"   –ó–∞–ø–∏—Å–µ–π: {stats.get('count', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                sample = stats.get("sample_data", [])
                if sample:
                    print(f"   –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {json.dumps(sample[0], indent=2, ensure_ascii=False, default=str)[:200]}...")
            else:
                print(f"   –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        results[table] = {
            "exists": exists,
            "message": message,
            "stats": get_table_stats(table) if exists else None
        }
    
    return results

def generate_report(results):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\\n" + "=" * 60)
    print("üìã –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tables = len(results)
    existing_tables = sum(1 for r in results.values() if r["exists"])
    missing_tables = total_tables - existing_tables
    
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {total_tables}")
    print(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {existing_tables}")
    print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö: {missing_tables}")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"\\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    
    for table, result in results.items():
        status = "‚úÖ" if result["exists"] else "‚ùå"
        print(f"   {status} {table}")
        
        if result["exists"] and result["stats"]:
            stats = result["stats"]
            if stats.get("exists"):
                count = stats.get("count", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                print(f"      –ó–∞–ø–∏—Å–µ–π: {count}")
            else:
                print(f"      –û—à–∏–±–∫–∞: {stats.get('error', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            print(f"      {result['message']}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    if missing_tables > 0:
        print("   ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç:")
        for table, result in results.items():
            if not result["exists"]:
                print(f"      - {table}")
        print("   üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_database.py")
    
    if existing_tables == total_tables:
        print("   ‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        print("   üîß –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: python backup_database.py")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    has_data = False
    for table, result in results.items():
        if result["exists"] and result["stats"] and result["stats"].get("count", 0) > 0:
            has_data = True
            break
    
    if has_data:
        print("   üìä –í –±–∞–∑–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ")
        print("   üíæ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: python backup_database.py")
    else:
        print("   üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
        print("   üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

def save_report_to_file(results):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"database_report_{timestamp}.json"
    
    report_data = {
        "timestamp": datetime.now().isoformat(),
        "supabase_url": SUPABASE_URL,
        "results": results,
        "summary": {
            "total_tables": len(results),
            "existing_tables": sum(1 for r in results.values() if r["exists"]),
            "missing_tables": sum(1 for r in results.values() if not r["exists"])
        }
    }
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(report_data, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"\\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not check_database_connection():
        print("\\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏ SUPABASE_ANON_KEY")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    results = check_all_tables()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    generate_report(results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    save_report_to_file(results)
    
    print("\\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
