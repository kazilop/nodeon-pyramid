#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã NodeOn Pyramid
"""

import requests
import json
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
RAILWAY_URL = "https://nodeon-production.up.railway.app"
GITHUB_PAGES_URL = "https://kazilop.github.io/nodeon-pyramid"
SUPABASE_URL = "https://ahxwpzgltlzlvrtrbanm.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFoeHdwemdsdGx6bHZydHJiYW5tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk1MDMxNDksImV4cCI6MjA3NTA3OTE0OX0.h4sMVhVwvRUiHgbevDgv9W1G2S__uDWPUSCiXdrEy4E"

def check_railway_backend():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Railway backend"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Railway Backend...")
    
    endpoints = [
        "/",
        "/test", 
        "/api/test",
        "/health"
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{RAILWAY_URL}{endpoint}", timeout=10)
            print(f"   {endpoint}: {response.status_code}")
            if response.status_code == 200:
                print(f"      –û—Ç–≤–µ—Ç: {response.text[:100]}...")
            else:
                print(f"      –û—à–∏–±–∫–∞: {response.text[:100]}...")
        except Exception as e:
            print(f"   {endpoint}: ‚ùå {e}")
    
    return True

def check_github_pages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ GitHub Pages frontend"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub Pages Frontend...")
    
    try:
        response = requests.get(GITHUB_PAGES_URL, timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text[:100]}...")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_supabase_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase Database...")
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = ["nodeon_users", "nodeon_transactions", "nodeon_referral_stats"]
        
        for table in tables:
            response = requests.get(
                f"{SUPABASE_URL}/rest/v1/{table}?select=count",
                headers=headers
            )
            print(f"   {table}: {response.status_code}")
            if response.status_code == 200:
                print(f"      ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞: {response.text[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints...")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        print("   –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        response = requests.get(
            f"{RAILWAY_URL}/api/user/profile",
            params={"init_data": "test_data"},
            timeout=10
        )
        print(f"      –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"      ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data['user']['first_name']}")
        else:
            print(f"      ‚ùå –û—à–∏–±–∫–∞: {response.text[:100]}...")
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ Pro
    try:
        print("   –¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ Pro —Å—Ç–∞—Ç—É—Å–∞...")
        response = requests.post(
            f"{RAILWAY_URL}/api/pro/buy",
            params={"init_data": "test_data"},
            timeout=10
        )
        print(f"      –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"      ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {data.get('message', 'OK')}")
        else:
            print(f"      ‚ùå –û—à–∏–±–∫–∞: {response.text[:100]}...")
    except Exception as e:
        print(f"      ‚ùå –û—à–∏–±–∫–∞: {e}")

def setup_developer_account():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    print("\nüë§ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.207940967",
            headers=headers
        )
        
        if response.status_code == 200:
            users = response.json()
            if users:
                user = users[0]
                print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:")
                print(f"      ID: {user['id']}")
                print(f"      –ò–º—è: {user['first_name']} {user['last_name']}")
                print(f"      –ë–∞–ª–∞–Ω—Å: {user['balance_ndn']} NDN")
                print(f"      Pro: {'–î–∞' if user['is_pro'] else '–ù–µ—Ç'}")
                return True
            else:
                print("   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("üöÄ NodeOn Pyramid - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Railway Backend
    check_railway_backend()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub Pages
    check_github_pages()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase
    check_supabase_connection()
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    test_api_endpoints()
    
    # 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    setup_developer_account()
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ï—Å–ª–∏ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç - –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram")
    print("2. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–≤–æ–¥—É –≤—ã—à–µ")
    print("3. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç –≤ Supabase")
    
    print(f"\nüîó –°—Å—ã–ª–∫–∏:")
    print(f"   Frontend: {GITHUB_PAGES_URL}")
    print(f"   Backend: {RAILWAY_URL}")
    print(f"   Database: {SUPABASE_URL}")

if __name__ == "__main__":
    main()
