import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from config import settings
import httpx

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(settings.telegram_bot_token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        referral_code = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ
        if context.args:
            referral_code = context.args[0]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Mini App
        keyboard = [
            [InlineKeyboardButton(
                "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url=f"https://yourdomain.com")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
            )]
        ]
        
        if referral_code:
            keyboard.append([InlineKeyboardButton(
                "üì± –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ",
                web_app=WebAppInfo(url=f"https://yourdomain.com?ref={referral_code}")
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NodeOn Pyramid, {user.first_name}!

üí∞ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –º–æ–Ω–µ—Ç–∞–º–∏ NDN
üìà –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–æ 7 —É—Ä–æ–≤–Ω–µ–π –≤ –≥–ª—É–±–∏–Ω—É
‚≠ê –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –≤—ã–≤–æ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram Stars

{self.get_rules_text()}
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ <b>NodeOn Pyramid Bot</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
2. –ö—É–ø–∏—Ç–µ 1000 NDN –∑–∞ Telegram Stars
3. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ Pro —Å—Ç–∞—Ç—É—Å
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
5. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!

<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 1: 200 NDN
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 2-7: 150 NDN –∫–∞–∂–¥—ã–π

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
@your_support_username
        """
        
        await update.message.reply_text(help_text, parse_mode='HTML')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message_text = update.message.text.lower()
        
        if any(word in message_text for word in ['–ø—Ä–∞–≤–∏–ª–∞', '–∫–∞–∫ –∏–≥—Ä–∞—Ç—å', '–ø–æ–º–æ—â—å']):
            await self.help_command(update, context)
        elif any(word in message_text for word in ['–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–æ—Ç–∫—Ä—ã—Ç—å', '–∏–≥—Ä–∞']):
            keyboard = [[InlineKeyboardButton(
                "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                web_app=WebAppInfo(url="https://yourdomain.com")
            )]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    def get_rules_text(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∞–≤–∏–ª"""
        return """
<b>üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>
‚Ä¢ –ö—É–ø–∏—Ç–µ Pro —Å—Ç–∞—Ç—É—Å –∑–∞ 1000 NDN
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å—Å—ã–ª–∫–µ
‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Å –∫–∞–∂–¥–æ–≥–æ Pro —Ä–µ—Ñ–µ—Ä–∞–ª–∞
‚Ä¢ –í—ã–≤–æ–¥–∏—Ç–µ NDN –æ–±—Ä–∞—Ç–Ω–æ –≤ Stars

<b>üí∞ –ù–∞–≥—Ä–∞–¥—ã –ø–æ —É—Ä–æ–≤–Ω—è–º:</b>
1Ô∏è‚É£ 200 NDN
2Ô∏è‚É£ 150 NDN
3Ô∏è‚É£ 150 NDN
4Ô∏è‚É£ 150 NDN
5Ô∏è‚É£ 150 NDN
6Ô∏è‚É£ 150 NDN
7Ô∏è‚É£ 150 NDN
        """
    
    async def process_referral_join(self, user_id: int, referral_code: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"http://backend:8000/api/referrals/join-by-referral",
                    json={
                        "user_id": user_id,
                        "referral_code": referral_code
                    }
                )
                return response.json()
        except Exception as e:
            logger.error(f"Error processing referral join: {e}")
            return None
    
    async def send_notification(self, user_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.application.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"Error sending notification: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = TelegramBot()

if __name__ == "__main__":
    bot.run()
