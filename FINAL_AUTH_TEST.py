#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram API
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
RAILWAY_URL = "https://nodeon-production.up.railway.app"
API_BASE = f"{RAILWAY_URL}/api"

def test_all_scenarios():
    """–¢–µ—Å—Ç –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üîê –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ß–ï–†–ï–ó TELEGRAM API")
    print("=" * 60)
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram (–∏–∑ –ª–æ–≥–æ–≤)
    real_telegram_data = "query_id%3DAAFn7WQMAAAAAGftZAynMETx%26user%3D%257B%2522id%2522%253A207940967%252C%2522first_name%2522%253A%2522Fish%2522%252C%2522last_name%2522%253A%2522%2522%252C%2522username%2522%253A%2522NobodyYety%2522%252C%2522language_code%2522%253A%2522ru%2522%252C%2522is_premium%2522%253Atrue%252C%2522allows_write_to_pm%2522%253Atrue%252C%2522photo_url%2522%253A%2522https%253A%255C%252F%255C%252Ft.me%255C%252Fi%255C%252Fuserpic%255C%252F320%255C%252F6ZhmPb8VHMum-L3NuklXZIDjzwG5z3nmsPstk-j-X0Q.svg%2522%257D%26auth_date%3D1759595069%26signature%3DzaTxfsbclaZwvnfSR1fy86Yr9_TDYfYKlbdlIDCI0CZHOte_WZ8DHcUuIxv7RVqoiuiux-yZqP-ZMMNLSnefDQ%26hash%3D5bd316b59632460d35963101eac62a76f2538fb18b5958ad6f9114f0931e29f9"
    
    test_cases = [
        {
            "name": "‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram",
            "init_data": real_telegram_data,
            "expected_status": 200,
            "should_work": True
        },
        {
            "name": "‚ùå –ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            "init_data": None,
            "expected_status": 401,
            "should_work": False
        },
        {
            "name": "‚ùå –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "init_data": "",
            "expected_status": 401,
            "should_work": False
        },
        {
            "name": "‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "init_data": "test_data",
            "expected_status": 401,
            "should_work": False
        },
        {
            "name": "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "init_data": "invalid_data",
            "expected_status": 401,
            "should_work": False
        },
        {
            "name": "‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ user)",
            "init_data": "auth_date=123&hash=abc",
            "expected_status": 401,
            "should_work": False
        },
        {
            "name": "‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ auth_date)",
            "init_data": "user=%7B%22id%22%3A123%7D&hash=abc",
            "expected_status": 401,
            "should_work": False
        }
    ]
    
    results = []
    
    for test_case in test_cases:
        print(f"\nüß™ {test_case['name']}")
        print("-" * 50)
        
        try:
            if test_case['init_data'] is None:
                response = requests.get(f"{API_BASE}/user/profile")
            else:
                response = requests.get(f"{API_BASE}/user/profile?init_data={test_case['init_data']}")
            
            status = response.status_code
            expected = test_case['expected_status']
            
            print(f"–°—Ç–∞—Ç—É—Å: {status} (–æ–∂–∏–¥–∞–ª—Å—è: {expected})")
            
            if status == expected:
                if test_case['should_work']:
                    try:
                        data = response.json()
                        user = data.get('user', {})
                        print(f"‚úÖ –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('first_name')} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                        print(f"   –ë–∞–ª–∞–Ω—Å: {user.get('balance_ndn')} NDN")
                        print(f"   Pro —Å—Ç–∞—Ç—É—Å: {user.get('is_pro')}")
                    except:
                        print("‚úÖ –£–°–ü–ï–•: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
                else:
                    try:
                        data = response.json()
                        print(f"‚úÖ –£–°–ü–ï–•: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('detail', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
                    except:
                        print("‚úÖ –£–°–ü–ï–•: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                
                results.append(True)
            else:
                print(f"‚ùå –û–®–ò–ë–ö–ê: –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å {status}, –æ–∂–∏–¥–∞–ª—Å—è {expected}")
                results.append(False)
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            results.append(False)
    
    return results

def test_api_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("\nüè• –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API")
    print("-" * 30)
    
    try:
        response = requests.get(f"{API_BASE}/test")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('message')}")
            return True
        else:
            print(f"‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API
    api_health = test_api_health()
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_results = test_all_scenarios()
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_tests = len(auth_results)
    passed_tests = sum(auth_results)
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    print(f"üè• API –∑–¥–æ—Ä–æ–≤—å–µ: {'‚úÖ –†–ê–ë–û–¢–ê–ï–¢' if api_health else '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"üîê –¢–µ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {passed_tests}/{total_tests} –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if api_health and passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 100%")
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´:")
        if not api_health:
            print("   - API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        if passed_tests < total_tests:
            print(f"   - {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–æ—à–ª–∏")
    
    print("\nüìù –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:")
    print("   - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ Telegram Mini App")
    print("   - –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã")
    print("   - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ")

if __name__ == "__main__":
    main()
