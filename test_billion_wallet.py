#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —Å 1 –º–∏–ª–ª–∏–∞—Ä–¥–æ–º NDN
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
RAILWAY_URL = "https://nodeon-production.up.railway.app"
API_BASE = f"{RAILWAY_URL}/api"
SUPABASE_URL = "https://ahxwpzgltlzlvrtrbanm.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFoeHdwemdsdGx6bHZydHJiYW5tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk1MDMxNDksImV4cCI6MjA3NTA3OTE0OX0.h4sMVhVwvRUiHgbevDgv9W1G2S__uDWPUSCiXdrEy4E"

def get_supabase_headers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è Supabase API"""
    return {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }

def test_api_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üè• –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API")
    print("-" * 30)
    
    try:
        response = requests.get(f"{API_BASE}/test", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('message')}")
            return True
        else:
            print(f"‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_billion_wallet_balance():
    """–¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∞ –º–∏–ª–ª–∏–∞—Ä–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
    print("\nüí∞ –¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ (1 –º–ª—Ä–¥ NDN)")
    print("-" * 60)
    
    try:
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/rpc/get_server_wallet_balance",
            headers=get_supabase_headers(),
            json={}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                wallet = data.get('wallet', {})
                balance = float(wallet.get('balance_ndn', 0))
                
                print("‚úÖ –ë–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   ID –∫–æ—à–µ–ª—å–∫–∞: {wallet.get('id')}")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {wallet.get('wallet_name')}")
                print(f"   üí∞ –†–µ–∑–µ—Ä–≤ NDN: {balance:,.2f} NDN")
                print(f"   üì§ –í—ã–¥–∞–Ω–æ NDN: {wallet.get('total_ndn_issued'):,.2f} NDN")
                print(f"   üì• –ü–æ–ª—É—á–µ–Ω–æ NDN: {wallet.get('total_ndn_received'):,.2f} NDN")
                print(f"   üíé –î–æ—Å—Ç—É–ø–Ω–æ NDN: {balance:,.2f} NDN")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω 1 –º–∏–ª–ª–∏–∞—Ä–¥—É
                if balance >= 1000000000:
                    print("üéâ –£–°–ü–ï–•: –°–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç 1+ –º–∏–ª–ª–∏–∞—Ä–¥ NDN!")
                    return True
                else:
                    print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 1 –º–∏–ª–ª–∏–∞—Ä–¥–∞: {balance:,.2f} NDN")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: {data.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:200]}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_stars_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Stars"""
    print("\n‚≠ê –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Stars")
    print("-" * 40)
    
    try:
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/rpc/get_stars_config",
            headers=get_supabase_headers(),
            json={}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                config = data.get('config', {})
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Stars —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –ö—É—Ä—Å Stars ‚Üí NDN: {config.get('stars_to_ndn_rate')}")
                print(f"   –ö—É—Ä—Å NDN ‚Üí Stars: {config.get('ndn_to_stars_rate')}")
                print(f"   –ú–∏–Ω–∏–º—É–º –ø–æ–∫—É–ø–∫–∏: {config.get('min_stars_purchase')} Stars")
                print(f"   –ú–∞–∫—Å–∏–º—É–º –ø–æ–∫—É–ø–∫–∏: {config.get('max_stars_purchase')} Stars")
                print(f"   –ö–æ–º–∏—Å—Å–∏—è –≤—ã–≤–æ–¥–∞: {config.get('stars_withdrawal_fee_percent')}%")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {data.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_tables_exist():
    """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
    print("-" * 40)
    
    tables = [
        "nodeon_server_wallet",
        "nodeon_wallet_transactions", 
        "nodeon_stars_config",
        "nodeon_stars_payments"
    ]
    
    results = []
    
    for table in tables:
        try:
            response = requests.get(
                f"{SUPABASE_URL}/rest/v1/{table}?select=*&limit=1",
                headers=get_supabase_headers()
            )
            
            if response.status_code == 200:
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                results.append(True)
            else:
                print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {response.status_code}")
                results.append(False)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
            results.append(False)
    
    return all(results)

def test_large_purchase():
    """–¢–µ—Å—Ç –±–æ–ª—å—à–æ–π –ø–æ–∫—É–ø–∫–∏ (100,000 Stars)"""
    print("\nüíé –¢–µ—Å—Ç –±–æ–ª—å—à–æ–π –ø–æ–∫—É–ø–∫–∏ (100,000 Stars)")
    print("-" * 50)
    
    real_telegram_data = "query_id%3DAAH6z9s5AgAAAPrP2zmCJWf0%26user%3D%257B%2522id%2522%253A5265674234%252C%2522first_name%2522%253A%2522%25D0%259C%25D0%25B0%25D0%25B9%25D1%258F%2522%252C%2522last_name%2522%253A%2522%2522%252C%2522username%2522%253A%2522mai_ryd%2522%252C%2522language_code%2522%253A%2522ru%2522%252C%2522allows_write_to_pm%2522%253Atrue%252C%2522photo_url%2522%253A%2522https%253A%255C%252F%255C%252Ft.me%255C%252Fi%255C%252Fuserpic%255C%252F320%255C%252FOXwbOMueYZ5veQLSz0ygjfcgU-4yhnHeMKOSuAhAi9gMZXI6XwIliSn9-WV0AREK.svg%2522%257D%26auth_date%3D1759609132%26signature%3D-Z9w-IkHM3au52cQwfPSfbP2_GHAZWxc9fhaqCQ0mFR8WwAnbqQNLKTQ2I3C3_5shPl_0Abr89sVUym0jjsmBw%26hash%3D130f4fea4aad862c2578c4ceae5ea05622ee78be051d5a29f969905c9647f8f0"
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É 100,000 Stars (100,000 NDN)
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/rpc/process_stars_purchase",
            headers=get_supabase_headers(),
            json={
                "p_user_id": 5265674234,
                "p_stars_amount": 100000.0,
                "p_ndn_amount": 100000.0,
                "p_payment_id": "test_large_purchase_" + str(int(time.time()))
            }
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ –ë–æ–ª—å—à–∞—è –ø–æ–∫—É–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
                print(f"   –°—É–º–º–∞ Stars: {data.get('stars_amount'):,.2f}")
                print(f"   –°—É–º–º–∞ NDN: {data.get('ndn_amount'):,.2f}")
                print(f"   –ë–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–æ: {data.get('server_balance_before'):,.2f} NDN")
                print(f"   –ë–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ: {data.get('server_balance_after'):,.2f} NDN")
                print(f"   –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {data.get('user_balance'):,.2f} NDN")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {data.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_wallet_transactions():
    """–¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ—à–µ–ª—å–∫–∞"""
    print("\nüìä –¢–µ—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ—à–µ–ª—å–∫–∞")
    print("-" * 50)
    
    try:
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/rpc/get_wallet_transactions",
            headers=get_supabase_headers(),
            json={
                "p_limit": 10,
                "p_offset": 0
            }
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                transactions = data.get('transactions', [])
                print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")
                if transactions:
                    latest = transactions[0]
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:")
                    print(f"     –¢–∏–ø: {latest.get('type')}")
                    print(f"     –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {latest.get('user_name')}")
                    print(f"     Stars: {latest.get('stars_amount')}")
                    print(f"     NDN: {latest.get('ndn_amount')}")
                    print(f"     –ë–∞–ª–∞–Ω—Å –¥–æ: {latest.get('balance_before'):,.2f}")
                    print(f"     –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {latest.get('balance_after'):,.2f}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {data.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–ª–ª–∏–∞—Ä–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ï–†–ù–û–ì–û –ö–û–®–ï–õ–¨–ö–ê –° 1 –ú–ò–õ–õ–ò–ê–†–î–û–ú NDN")
    print("=" * 70)
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    results.append(("API Health", test_api_health()))
    results.append(("Tables Exist", test_tables_exist()))
    results.append(("Stars Config", test_stars_config()))
    results.append(("Billion Wallet Balance", test_billion_wallet_balance()))
    results.append(("Large Purchase", test_large_purchase()))
    results.append(("Wallet Transactions", test_wallet_transactions()))
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_tests = len(results)
    passed_tests = sum(1 for _, status in results if status)
    
    print("\n" + "=" * 70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–ò–õ–õ–ò–ê–†–î–ù–û–ì–û –ö–û–®–ï–õ–¨–ö–ê")
    print("=" * 70)
    
    for name, status in results:
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {name}")
    
    print(f"\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ú–ò–õ–õ–ò–ê–†–î–ù–û–ì–û –ö–û–®–ï–õ–¨–ö–ê –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –°–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —Å 1 –º–ª—Ä–¥ NDN —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã Stars —Å–æ–∑–¥–∞–Ω—ã")
        print("‚úÖ RPC —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –ë–æ–ª—å—à–∏–µ –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–µ–¥–µ—Ç—Å—è")
        print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ñ–ï NDN –ó–ê TELEGRAM STARS!")
    else:
        print(f"\n‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞ –≤ Supabase")
    
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ CREATE_BILLION_NDN_WALLET.sql –≤ Supabase")
    print("2. –û–±–Ω–æ–≤–∏—Ç–µ API –Ω–∞ Railway")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞")
    print("4. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ Stars —á–µ—Ä–µ–∑ @BotSupport")
    print("5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram Mini App")

if __name__ == "__main__":
    main()
