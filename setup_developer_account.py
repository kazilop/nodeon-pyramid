#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Pro —Å—Ç–∞—Ç—É—Å
- –ó–∞—á–∏—Å–ª—è–µ—Ç 10,000 NDN
- –°–æ–∑–¥–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
"""

import os
import sys
from decimal import Decimal
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

try:
    from backend.config import settings
    from backend.database import User, Transaction, ReferralStats, Base
except ImportError:
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞
    import os
    os.chdir('..')
    from backend.config import settings
    from backend.database import User, Transaction, ReferralStats, Base

def setup_developer_account():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    Base.metadata.create_all(bind=engine)
    
    db = SessionLocal()
    
    try:
        developer_telegram_id = 207940967
        
        print(f"üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (ID: {developer_telegram_id})...")
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == developer_telegram_id).first()
        
        if not user:
            print("üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=developer_telegram_id,
                username="developer",
                first_name="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                last_name="NodeOn",
                balance_ndn=Decimal('0'),
                is_pro=False,
                referral_link="",
                inviter_id=None
            )
            db.add(user)
            db.commit()
            db.refresh(user)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {user.id}")
        else:
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —Å ID: {user.id}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Pro —Å—Ç–∞—Ç—É—Å
        if not user.is_pro:
            print("üëë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Pro —Å—Ç–∞—Ç—É—Å...")
            user.is_pro = True
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            from api.ndn_api import generate_referral_token
            referral_token = generate_referral_token(user.id)
            user.referral_link = f"https://t.me/{settings.telegram_bot_username}?startapp={referral_token}"
            
            print(f"‚úÖ Pro —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            print(f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {user.referral_link}")
        else:
            print("üëë Pro —Å—Ç–∞—Ç—É—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞—á–∏—Å–ª—è–µ–º 10,000 NDN
        current_balance = user.balance_ndn
        bonus_amount = Decimal('10000')
        user.balance_ndn += bonus_amount
        
        print(f"üí∞ –ó–∞—á–∏—Å–ª—è–µ–º {bonus_amount} NDN...")
        print(f"   –ë—ã–ª–æ: {current_balance} NDN")
        print(f"   –°—Ç–∞–ª–æ: {user.balance_ndn} NDN")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            user_id=user.id,
            type="developer_bonus",
            amount_ndn=bonus_amount,
            description="–ë–æ–Ω—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É - 10,000 NDN"
        )
        db.add(transaction)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        existing_stats = db.query(ReferralStats).filter(ReferralStats.user_id == user.id).first()
        if not existing_stats:
            print("üìä –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...")
            for level in range(1, 8):
                stats = ReferralStats(
                    user_id=user.id,
                    level=level,
                    total_referrals=0,
                    total_earnings=Decimal('0')
                )
                db.add(stats)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()
        
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name}")
        print(f"üÜî Telegram ID: {user.telegram_id}")
        print(f"üëë Pro —Å—Ç–∞—Ç—É—Å: {'‚úÖ –î–∞' if user.is_pro else '‚ùå –ù–µ—Ç'}")
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å NDN: {user.balance_ndn}")
        print(f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {user.referral_link}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def check_account_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()
    
    try:
        developer_telegram_id = 207940967
        user = db.query(User).filter(User.telegram_id == developer_telegram_id).first()
        
        if user:
            print(f"\nüìä –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:")
            print(f"üë§ –ò–º—è: {user.first_name} {user.last_name}")
            print(f"üÜî Telegram ID: {user.telegram_id}")
            print(f"üëë Pro —Å—Ç–∞—Ç—É—Å: {'‚úÖ –î–∞' if user.is_pro else '‚ùå –ù–µ—Ç'}")
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å NDN: {user.balance_ndn}")
            print(f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {user.referral_link}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = db.query(Transaction).filter(Transaction.user_id == user.id).all()
            print(f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")
            
            for tx in transactions[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                print(f"   - {tx.type}: {tx.amount_ndn} NDN ({tx.description})")
        else:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ NodeOn Pyramid - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å...")
    check_account_status()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    print("\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç...")
    if setup_developer_account():
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        check_account_status()
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.")
