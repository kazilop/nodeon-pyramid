#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
–°–æ–∑–¥–∞–µ—Ç JSON —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
"""

import os
import json
import requests
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY')

def create_backup_directory():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±—ç–∫–∞–ø–∞"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = f"backup_{timestamp}"
    os.makedirs(backup_dir, exist_ok=True)
    return backup_dir

def get_table_data(table_name, backup_dir):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        print(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}")
        return False
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        url = f"{SUPABASE_URL}/rest/v1/{table_name}?select=*"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            filename = os.path.join(backup_dir, f"{table_name}.json")
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False, default=str)
            
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name}: {len(data)} –∑–∞–ø–∏—Å–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {table_name}: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π {table_name}: {e}")
        return False

def get_table_schema(table_name, backup_dir):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã"""
    
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        return False
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        url = f"{SUPABASE_URL}/rest/v1/{table_name}?select=*&limit=1"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            filename = os.path.join(backup_dir, f"{table_name}_schema.json")
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump({
                    "table_name": table_name,
                    "backup_date": datetime.now().isoformat(),
                    "sample_record": response.json()[0] if response.json() else None
                }, f, indent=2, ensure_ascii=False, default=str)
            
            return True
        else:
            return False
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –¥–ª—è {table_name}: {e}")
        return False

def create_backup_info(backup_dir, tables_status):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—ç–∫–∞–ø–µ"""
    
    info = {
        "backup_date": datetime.now().isoformat(),
        "supabase_url": SUPABASE_URL,
        "tables": tables_status,
        "total_tables": len(tables_status),
        "successful_backups": sum(1 for status in tables_status.values() if status),
        "failed_backups": sum(1 for status in tables_status.values() if not status)
    }
    
    filename = os.path.join(backup_dir, "backup_info.json")
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(info, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")

def create_restore_script(backup_dir, tables_status):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    script_content = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞
"""

import os
import json
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY')

def restore_table_data(table_name, backup_dir):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É"""
    
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        print(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        filename = os.path.join(backup_dir, f"{table_name}.json")
        if not os.path.exists(filename):
            print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if not data:
            print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
            return True
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        url = f"{SUPABASE_URL}/rest/v1/{table_name}"
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        success_count = 0
        for record in data:
            try:
                response = requests.post(url, headers=headers, json=record)
                if response.status_code in [200, 201]:
                    success_count += 1
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ {table_name}: {response.status_code}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ {table_name}: {e}")
        
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞")
    print("=" * 50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–∞
    backup_dirs = [d for d in os.listdir('.') if d.startswith('backup_')]
    if not backup_dirs:
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø
    latest_backup = sorted(backup_dirs)[-1]
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ç–∫–∞–ø: {latest_backup}")
    
    # –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ
    info_file = os.path.join(latest_backup, "backup_info.json")
    if os.path.exists(info_file):
        with open(info_file, 'r', encoding='utf-8') as f:
            info = json.load(f)
        print(f"üìÖ –î–∞—Ç–∞ –±—ç–∫–∞–ø–∞: {info.get('backup_date')}")
        print(f"üìä –¢–∞–±–ª–∏—Ü –≤ –±—ç–∫–∞–ø–µ: {info.get('total_tables')}")
    
    # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    tables = [
        "nodeon_users",
        "nodeon_transactions", 
        "nodeon_referral_stats",
        "nodeon_miner_data",
        "nodeon_miner_stats",
        "nodeon_achievements",
        "nodeon_shops"
    ]
    
    print("\\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    
    for table in tables:
        restore_table_data(table, latest_backup)
    
    print("\\n‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
'''
    
    filename = os.path.join(backup_dir, "restore_backup.py")
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print(f"üìú –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"""
    
    print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase")
    print("=" * 50)
    
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–∞
    backup_dir = create_backup_directory()
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±—ç–∫–∞–ø–∞: {backup_dir}")
    
    # –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –¥–ª—è –±—ç–∫–∞–ø–∞
    tables = [
        "nodeon_users",
        "nodeon_transactions", 
        "nodeon_referral_stats",
        "nodeon_miner_data",
        "nodeon_miner_stats",
        "nodeon_miner_farms",
        "nodeon_miner_upgrades",
        "nodeon_miner_transactions",
        "nodeon_achievements",
        "nodeon_shops"
    ]
    
    print(f"\\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ {len(tables)} —Ç–∞–±–ª–∏—Ü...")
    
    tables_status = {}
    
    for table in tables:
        print(f"\\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {table}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        success = get_table_data(table, backup_dir)
        tables_status[table] = success
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã
        get_table_schema(table, backup_dir)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ
    create_backup_info(backup_dir, tables_status)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    create_restore_script(backup_dir, tables_status)
    
    print("\\n" + "=" * 50)
    print("‚úÖ –ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    successful = sum(1 for status in tables_status.values() if status)
    total = len(tables_status)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{total} —Ç–∞–±–ª–∏—Ü —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    
    if successful < total:
        print("\\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:")
        for table, status in tables_status.items():
            if not status:
                print(f"   ‚ùå {table}")
    
    print(f"\\nüìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {backup_dir}")
    print("\\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–∞")
    print("   2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ")
    print("   3. –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python restore_backup.py")

if __name__ == "__main__":
    main()
