#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è NodeOn Pyramid –≤ Supabase
"""

import os
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è NodeOn Pyramid"""
    
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    try:
        engine = create_engine(database_url)
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º nodeon_
        create_tables_sql = """
        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π NodeOn
        CREATE TABLE IF NOT EXISTS nodeon_users (
            id SERIAL PRIMARY KEY,
            telegram_id INTEGER UNIQUE NOT NULL,
            username VARCHAR(255),
            first_name VARCHAR(255),
            last_name VARCHAR(255),
            balance_ndn DECIMAL(10,2) DEFAULT 0,
            is_pro BOOLEAN DEFAULT FALSE,
            referral_link VARCHAR(255) UNIQUE,
            inviter_id INTEGER REFERENCES nodeon_users(id),
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW()
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π NodeOn
        CREATE TABLE IF NOT EXISTS nodeon_transactions (
            id SERIAL PRIMARY KEY,
            user_id INTEGER NOT NULL REFERENCES nodeon_users(id),
            type VARCHAR(50) NOT NULL,
            amount_ndn DECIMAL(10,2) NOT NULL,
            amount_stars DECIMAL(10,2),
            description TEXT,
            referral_level INTEGER,
            created_at TIMESTAMP DEFAULT NOW()
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ NodeOn
        CREATE TABLE IF NOT EXISTS nodeon_referral_stats (
            id SERIAL PRIMARY KEY,
            user_id INTEGER NOT NULL REFERENCES nodeon_users(id),
            level INTEGER NOT NULL,
            total_referrals INTEGER DEFAULT 0,
            total_earnings DECIMAL(10,2) DEFAULT 0,
            updated_at TIMESTAMP DEFAULT NOW()
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ NodeOn
        CREATE TABLE IF NOT EXISTS nodeon_payment_requests (
            id SERIAL PRIMARY KEY,
            user_id INTEGER NOT NULL REFERENCES nodeon_users(id),
            amount_ndn DECIMAL(10,2) NOT NULL,
            amount_stars DECIMAL(10,2) NOT NULL,
            status VARCHAR(20) DEFAULT 'pending',
            created_at TIMESTAMP DEFAULT NOW(),
            processed_at TIMESTAMP
        );

        -- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        CREATE INDEX IF NOT EXISTS idx_nodeon_users_telegram_id ON nodeon_users(telegram_id);
        CREATE INDEX IF NOT EXISTS idx_nodeon_users_referral_link ON nodeon_users(referral_link);
        CREATE INDEX IF NOT EXISTS idx_nodeon_users_inviter_id ON nodeon_users(inviter_id);
        CREATE INDEX IF NOT EXISTS idx_nodeon_transactions_user_id ON nodeon_transactions(user_id);
        CREATE INDEX IF NOT EXISTS idx_nodeon_transactions_created_at ON nodeon_transactions(created_at);
        CREATE INDEX IF NOT EXISTS idx_nodeon_transactions_type ON nodeon_transactions(type);
        CREATE INDEX IF NOT EXISTS idx_nodeon_referral_stats_user_id ON nodeon_referral_stats(user_id);
        CREATE INDEX IF NOT EXISTS idx_nodeon_referral_stats_level ON nodeon_referral_stats(level);
        CREATE INDEX IF NOT EXISTS idx_nodeon_payment_requests_user_id ON nodeon_payment_requests(user_id);
        CREATE INDEX IF NOT EXISTS idx_nodeon_payment_requests_status ON nodeon_payment_requests(status);
        """
        
        with engine.connect() as conn:
            conn.execute(text(create_tables_sql))
            conn.commit()
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã NodeOn —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        result = conn.execute(text("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name LIKE 'nodeon_%'
            ORDER BY table_name
        """))
        
        tables = [row[0] for row in result]
        print(f"üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü NodeOn Pyramid –≤ Supabase...")
    print()
    
    if create_tables():
        print()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö NodeOn –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Vercel")
    else:
        print()
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")

if __name__ == "__main__":
    main()
