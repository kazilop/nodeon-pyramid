#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Stars
"""

import requests
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def setup_bot_with_stars():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Stars"""
    
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("üìù –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
        return False
    
    print("ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Stars")
    print("=" * 60)
    print(f"Bot Token: {bot_token[:10]}...")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    print("\nüìã –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ")
    print("-" * 40)
    
    try:
        bot_info_url = f"https://api.telegram.org/bot{bot_token}/getMe"
        response = requests.get(bot_info_url, timeout=10)
        
        if response.status_code == 200:
            bot_data = response.json()
            if bot_data.get('ok'):
                bot_info = bot_data.get('result', {})
                print(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω:")
                print(f"   –ò–º—è: {bot_info.get('first_name')}")
                print(f"   Username: @{bot_info.get('username')}")
                print(f"   ID: {bot_info.get('id')}")
                print(f"   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Stars: {bot_info.get('can_manage_stars', False)}")
                
                if not bot_info.get('can_manage_stars', False):
                    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Stars!")
                    print("   –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Telegram –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Stars")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {bot_data.get('description')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    print("\nüìã –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞")
    print("-" * 40)
    
    commands = [
        {"command": "start", "description": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å NodeOn Pyramid"},
        {"command": "help", "description": "‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"},
        {"command": "balance", "description": "üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å NDN"},
        {"command": "referral", "description": "üîó –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É"},
        {"command": "stats", "description": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"},
        {"command": "leaderboard", "description": "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤"}
    ]
    
    try:
        set_commands_url = f"https://api.telegram.org/bot{bot_token}/setMyCommands"
        response = requests.post(set_commands_url, json={"commands": commands}, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
                for cmd in commands:
                    print(f"   /{cmd['command']} - {cmd['description']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: {result.get('description')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Mini App
    print("\nüìã –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Mini App")
    print("-" * 40)
    
    mini_app_url = "https://kazilop.github.io/nodeon-pyramid/"
    
    try:
        # –°–æ–∑–¥–∞–µ–º Mini App
        create_app_url = f"https://api.telegram.org/bot{bot_token}/createApp"
        app_data = {
            "title": "NodeOn Pyramid",
            "description": "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –º–æ–Ω–µ—Ç–∞–º–∏ NDN",
            "photo": "https://kazilop.github.io/nodeon-pyramid/icon.png",
            "web_app": {
                "url": mini_app_url
            }
        }
        
        response = requests.post(create_app_url, json=app_data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                app_info = result.get('result', {})
                print(f"‚úÖ Mini App —Å–æ–∑–¥–∞–Ω:")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {app_info.get('title')}")
                print(f"   URL: {mini_app_url}")
                print(f"   App ID: {app_info.get('id')}")
            else:
                print(f"‚ö†Ô∏è Mini App —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {result.get('description')}")
        else:
            print(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Mini App: {response.status_code}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Mini App: {e}")
    
    # 4. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    print("\nüìã –®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook")
    print("-" * 40)
    
    webhook_url = "https://nodeon-production.up.railway.app/webhook"
    
    try:
        webhook_data = {
            'url': webhook_url,
            'allowed_updates': ['message', 'callback_query', 'pre_checkout_query']
        }
        
        webhook_api_url = f"https://api.telegram.org/bot{bot_token}/setWebhook"
        response = requests.post(webhook_api_url, json=webhook_data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                print("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
                print(f"   URL: {webhook_url}")
                print(f"   Pending updates: {result.get('result', {}).get('pending_update_count', 0)}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {result.get('description')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É Stars
    print("\nüìã –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Stars")
    print("-" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å Stars
        test_stars_url = f"https://api.telegram.org/bot{bot_token}/sendInvoice"
        test_invoice = {
            "chat_id": os.getenv('DEVELOPER_TELEGRAM_ID', '207940967'),
            "title": "–¢–µ—Å—Ç Stars",
            "description": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Stars",
            "payload": "test_stars_payment",
            "provider_token": "TEST_PROVIDER_TOKEN",
            "currency": "XTR",  # Telegram Stars
            "prices": [{"label": "Test", "amount": 100}]
        }
        
        response = requests.post(test_stars_url, json=test_invoice, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                print("‚úÖ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Stars –ø–ª–∞—Ç–µ–∂–∏")
            else:
                print(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Stars: {result.get('description')}")
        else:
            print(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Stars: {response.status_code}")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Stars: {e}")
    
    return True

def test_bot_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞")
    print("-" * 40)
    
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        print("‚ùå Bot token –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        test_data = {
            'chat_id': os.getenv('DEVELOPER_TELEGRAM_ID', '207940967'),
            'text': '''ü§ñ NodeOn Pyramid Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!

‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Stars –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
‚úÖ Mini App –Ω–∞—Å—Ç—Ä–æ–µ–Ω
‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ –ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã

üöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
üí∞ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /balance
üîó –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /referral

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: https://kazilop.github.io/nodeon-pyramid/''',
            'parse_mode': 'HTML'
        }
        
        response = requests.post(test_url, json=test_data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.get('description')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM –ë–û–¢–ê –° –ü–û–î–î–ï–†–ñ–ö–û–ô STARS")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
    if setup_bot_with_stars():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        test_bot_functionality()
        
        print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç –≤ Supabase")
        print("2. –û–±–Ω–æ–≤–∏—Ç–µ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Stars")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram")
        print("\nüåê –°—Å—ã–ª–∫–∏:")
        print("   Frontend: https://kazilop.github.io/nodeon-pyramid/")
        print("   API: https://nodeon-production.up.railway.app/api")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")

if __name__ == "__main__":
    main()
