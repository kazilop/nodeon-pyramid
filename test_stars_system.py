#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Stars –≤ NodeOn Pyramid
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
RAILWAY_URL = "https://nodeon-production.up.railway.app"
API_BASE = f"{RAILWAY_URL}/api"

def test_api_health():
    """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API"""
    print("üè• –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è API")
    print("-" * 30)
    
    try:
        response = requests.get(f"{API_BASE}/test", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data.get('message')}")
            return True
        else:
            print(f"‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_stars_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Stars"""
    print("\n‚≠ê –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Stars")
    print("-" * 40)
    
    try:
        response = requests.get(f"{API_BASE}/stars/config", timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                config = data.get('config', {})
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Stars —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –ö—É—Ä—Å: 1 Star = {config.get('stars_to_ndn_rate')} NDN")
                print(f"   –ú–∏–Ω–∏–º—É–º: {config.get('min_stars_purchase')} Stars")
                print(f"   –ú–∞–∫—Å–∏–º—É–º: {config.get('max_stars_purchase')} Stars")
                print(f"   –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–æ–∫—É–ø–∫—É: {config.get('stars_purchase_fee_percent')}%")
                print(f"   –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥: {config.get('stars_withdrawal_fee_percent')}%")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {data.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_user_profile_with_stars():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Stars"""
    print("\nüë§ –¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Stars")
    print("-" * 50)
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram –∏–∑ –ª–æ–≥–æ–≤
    real_telegram_data = "query_id%3DAAH6z9s5AgAAAPrP2zmCJWf0%26user%3D%257B%2522id%2522%253A5265674234%252C%2522first_name%2522%253A%2522%25D0%259C%25D0%25B0%25D0%25B9%25D1%258F%2522%252C%2522last_name%2522%253A%2522%2522%252C%2522username%2522%253A%2522mai_ryd%2522%252C%2522language_code%2522%253A%2522ru%2522%252C%2522allows_write_to_pm%2522%253Atrue%252C%2522photo_url%2522%253A%2522https%253A%255C%252F%255C%252Ft.me%255C%252Fi%255C%252Fuserpic%255C%252F320%255C%252FOXwbOMueYZ5veQLSz0ygjfcgU-4yhnHeMKOSuAhAi9gMZXI6XwIliSn9-WV0AREK.svg%2522%257D%26auth_date%3D1759609132%26signature%3D-Z9w-IkHM3au52cQwfPSfbP2_GHAZWxc9fhaqCQ0mFR8WwAnbqQNLKTQ2I3C3_5shPl_0Abr89sVUym0jjsmBw%26hash%3D130f4fea4aad862c2578c4ceae5ea05622ee78be051d5a29f969905c9647f8f0"
    
    try:
        response = requests.get(f"{API_BASE}/user/profile?init_data={real_telegram_data}")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                user = data.get('user', {})
                print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Stars —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name')}")
                print(f"   Username: @{user.get('username')}")
                print(f"   –ë–∞–ª–∞–Ω—Å NDN: {user.get('balance_ndn')} NDN")
                print(f"   –ë–∞–ª–∞–Ω—Å Stars: {user.get('balance_stars')} Stars")
                print(f"   –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ Stars: {user.get('total_stars_earned')} Stars")
                print(f"   –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ Stars: {user.get('total_stars_spent')} Stars")
                print(f"   Pro —Å—Ç–∞—Ç—É—Å: {user.get('is_pro')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {data.get('message')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_create_stars_payment():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ Stars"""
    print("\nüí≥ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ Stars")
    print("-" * 50)
    
    real_telegram_data = "query_id%3DAAH6z9s5AgAAAPrP2zmCJWf0%26user%3D%257B%2522id%2522%253A5265674234%252C%2522first_name%2522%253A%2522%25D0%259C%25D0%25B0%25D0%25B9%25D1%258F%2522%252C%2522last_name%2522%253A%2522%2522%252C%2522username%2522%253A%2522mai_ryd%2522%252C%2522language_code%2522%253A%2522ru%2522%252C%2522allows_write_to_pm%2522%253Atrue%252C%2522photo_url%2522%253A%2522https%253A%255C%252F%255C%252Ft.me%255C%252Fi%255C%252Fuserpic%255C%252F320%255C%252FOXwbOMueYZ5veQLSz0ygjfcgU-4yhnHeMKOSuAhAi9gMZXI6XwIliSn9-WV0AREK.svg%2522%257D%26auth_date%3D1759609132%26signature%3D-Z9w-IkHM3au52cQwfPSfbP2_GHAZWxc9fhaqCQ0mFR8WwAnbqQNLKTQ2I3C3_5shPl_0Abr89sVUym0jjsmBw%26hash%3D130f4fea4aad862c2578c4ceae5ea05622ee78be051d5a29f969905c9647f8f0"
    
    try:
        response = requests.post(f"{API_BASE}/stars/create-payment", 
            json={
                "init_data": real_telegram_data,
                "stars_amount": 100.0
            },
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ Stars —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   ID –ø–ª–∞—Ç–µ–∂–∞: {data.get('payment_id')}")
                print(f"   –°—É–º–º–∞ Stars: {data.get('stars_amount')}")
                print(f"   –°—É–º–º–∞ NDN: {data.get('ndn_amount')}")
                print(f"   URL –ø–ª–∞—Ç–µ–∂–∞: {data.get('payment_url')}")
                return data.get('payment_id')
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {data.get('message')}")
                return None
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_confirm_stars_payment(payment_id):
    """–¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ Stars"""
    print("\n‚úÖ –¢–µ—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ Stars")
    print("-" * 50)
    
    if not payment_id:
        print("‚ùå –ù–µ—Ç ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    try:
        response = requests.post(f"{API_BASE}/stars/confirm-payment", 
            json={
                "payment_id": payment_id,
                "telegram_payment_id": f"test_payment_{int(time.time())}"
            },
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ Stars —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
                print(f"   –°—É–º–º–∞ NDN: {data.get('ndn_amount')}")
                print(f"   –°—É–º–º–∞ Stars: {data.get('stars_amount')}")
                print(f"   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data.get('new_balance')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {data.get('message')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_stars_withdraw():
    """–¢–µ—Å—Ç –≤—ã–≤–æ–¥–∞ NDN –≤ Stars"""
    print("\nüí∏ –¢–µ—Å—Ç –≤—ã–≤–æ–¥–∞ NDN –≤ Stars")
    print("-" * 50)
    
    real_telegram_data = "query_id%3DAAH6z9s5AgAAAPrP2zmCJWf0%26user%3D%257B%2522id%2522%253A5265674234%252C%2522first_name%2522%253A%2522%25D0%259C%25D0%25B0%25D0%25B9%25D1%258F%2522%252C%2522last_name%2522%253A%2522%2522%252C%2522username%2522%253A%2522mai_ryd%2522%252C%2522language_code%2522%253A%2522ru%2522%252C%2522allows_write_to_pm%2522%253Atrue%252C%2522photo_url%2522%253A%2522https%253A%255C%252F%255C%252Ft.me%255C%252Fi%255C%252Fuserpic%255C%252F320%255C%252FOXwbOMueYZ5veQLSz0ygjfcgU-4yhnHeMKOSuAhAi9gMZXI6XwIliSn9-WV0AREK.svg%2522%257D%26auth_date%3D1759609132%26signature%3D-Z9w-IkHM3au52cQwfPSfbP2_GHAZWxc9fhaqCQ0mFR8WwAnbqQNLKTQ2I3C3_5shPl_0Abr89sVUym0jjsmBw%26hash%3D130f4fea4aad862c2578c4ceae5ea05622ee78be051d5a29f969905c9647f8f0"
    
    try:
        response = requests.post(f"{API_BASE}/stars/withdraw", 
            json={
                "init_data": real_telegram_data,
                "ndn_amount": 50.0
            },
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ –í—ã–≤–æ–¥ NDN –≤ Stars —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {data.get('message')}")
                print(f"   –°—É–º–º–∞ NDN: {data.get('ndn_amount')}")
                print(f"   –°—É–º–º–∞ Stars: {data.get('stars_amount')}")
                print(f"   –ö–æ–º–∏—Å—Å–∏—è: {data.get('withdrawal_fee')}")
                print(f"   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data.get('new_balance')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: {data.get('message')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_leaderboard_with_stars():
    """–¢–µ—Å—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å Stars"""
    print("\nüèÜ –¢–µ—Å—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞ —Å Stars")
    print("-" * 40)
    
    try:
        response = requests.get(f"{API_BASE}/stats/leaderboard", timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                leaders = data.get('leaders', [])
                print(f"‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ —Å Stars —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏–¥–µ—Ä–æ–≤: {len(leaders)}")
                if leaders:
                    top_leader = leaders[0]
                    print(f"   –¢–æ–ø-1: {top_leader.get('first_name')} - {top_leader.get('balance_ndn')} NDN, {top_leader.get('balance_stars')} Stars")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ª–∏–¥–µ—Ä–æ–≤: {data.get('message')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Stars —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ STARS")
    print("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    results.append(("API Health", test_api_health()))
    results.append(("Stars Config", test_stars_config()))
    results.append(("User Profile with Stars", test_user_profile_with_stars()))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    payment_id = test_create_stars_payment()
    results.append(("Create Stars Payment", payment_id is not None))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    if payment_id:
        results.append(("Confirm Stars Payment", test_confirm_stars_payment(payment_id)))
    else:
        results.append(("Confirm Stars Payment", False))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    results.append(("Stars Withdraw", test_stars_withdraw()))
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
    results.append(("Leaderboard with Stars", test_leaderboard_with_stars()))
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_tests = len(results)
    passed_tests = sum(1 for _, status in results if status)
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø STARS")
    print("=" * 60)
    
    for name, status in results:
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {name}")
    
    print(f"\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ STARS –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ Stars –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–æ–∫—É–ø–∞—Ç—å NDN –∑–∞ Stars")
        print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å NDN –≤ Stars")
        print("‚úÖ –ë–∞–ª–∞–Ω—Å—ã Stars –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print(f"\n‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ API")
    
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç ADD_STARS_SUPPORT.sql –≤ Supabase")
    print("2. –ó–∞–º–µ–Ω–∏—Ç–µ main.py –Ω–∞ main_with_stars.py")
    print("3. –ó–∞–º–µ–Ω–∏—Ç–µ index.html –Ω–∞ index_with_stars.html")
    print("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Railway")
    print("5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram Mini App")

if __name__ == "__main__":
    main()
