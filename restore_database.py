#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞
"""

import os
import json
import requests
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY')

def find_latest_backup():
    """–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞"""
    backup_dirs = [d for d in os.listdir('.') if d.startswith('backup_')]
    if not backup_dirs:
        return None
    return sorted(backup_dirs)[-1]

def restore_table_data(table_name, backup_dir, clear_existing=False):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É"""
    
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        print(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        filename = os.path.join(backup_dir, f"{table_name}.json")
        if not os.path.exists(filename):
            print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if not data:
            print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}")
            return True
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if clear_existing:
            print(f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã {table_name}...")
            delete_url = f"{SUPABASE_URL}/rest/v1/{table_name}"
            delete_response = requests.delete(delete_url, headers=headers)
            if delete_response.status_code in [200, 204]:
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} –æ—á–∏—â–µ–Ω–∞")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É {table_name}: {delete_response.status_code}")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        url = f"{SUPABASE_URL}/rest/v1/{table_name}"
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        success_count = 0
        error_count = 0
        
        for i, record in enumerate(data):
            try:
                # –£–¥–∞–ª—è–µ–º id –µ—Å–ª–∏ –µ—Å—Ç—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
                if 'id' in record:
                    del record['id']
                
                response = requests.post(url, headers=headers, json=record)
                if response.status_code in [200, 201]:
                    success_count += 1
                else:
                    error_count += 1
                    if error_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ {i+1} –≤ {table_name}: {response.status_code} - {response.text}")
                
            except Exception as e:
                error_count += 1
                if error_count <= 5:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏ {i+1} –≤ {table_name}: {e}")
        
        print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name}: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        if error_count > 0:
            print(f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {error_count}")
        
        return success_count > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        return False

def restore_with_dependencies(backup_dir, clear_existing=False):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    
    # –ü–æ—Ä—è–¥–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    tables_order = [
        "nodeon_users",           # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        "nodeon_transactions",    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç users)
        "nodeon_referral_stats",  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç users)
        "nodeon_miner_data",      # –î–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç users)
        "nodeon_miner_stats",     # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–π–Ω–µ—Ä–∞ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç users)
        "nodeon_miner_farms",     # –§–µ—Ä–º—ã –º–∞–π–Ω–µ—Ä–∞ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç users)
        "nodeon_miner_upgrades",  # –£–ª—É—á—à–µ–Ω–∏—è –º–∞–π–Ω–µ—Ä–∞ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç users)
        "nodeon_miner_transactions", # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–∞–π–Ω–µ—Ä–∞ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç users)
        "nodeon_achievements",    # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–∑–∞–≤–∏—Å—è—Ç –æ—Ç users)
        "nodeon_shops"           # –ú–∞–≥–∞–∑–∏–Ω—ã (–∑–∞–≤–∏—Å—è—Ç –æ—Ç users)
    ]
    
    print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    results = {}
    
    for table in tables_order:
        print(f"\\nüìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {table}")
        success = restore_table_data(table, backup_dir, clear_existing)
        results[table] = success
        
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        clear_existing = False
    
    return results

def validate_backup(backup_dir):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±—ç–∫–∞–ø–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    info_file = os.path.join(backup_dir, "backup_info.json")
    if not os.path.exists(info_file):
        print("‚ö†Ô∏è –§–∞–π–ª backup_info.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(info_file, 'r', encoding='utf-8') as f:
        info = json.load(f)
    
    print(f"üìÖ –î–∞—Ç–∞ –±—ç–∫–∞–ø–∞: {info.get('backup_date')}")
    print(f"üìä –¢–∞–±–ª–∏—Ü –≤ –±—ç–∫–∞–ø–µ: {info.get('total_tables')}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤: {info.get('successful_backups')}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤: {info.get('failed_backups')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    required_tables = [
        "nodeon_users",
        "nodeon_transactions", 
        "nodeon_referral_stats",
        "nodeon_miner_data",
        "nodeon_miner_stats"
    ]
    
    missing_files = []
    for table in required_tables:
        filename = os.path.join(backup_dir, f"{table}.json")
        if not os.path.exists(filename):
            missing_files.append(table)
    
    if missing_files:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Ç–∞–±–ª–∏—Ü: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ –ë—ç–∫–∞–ø –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±—ç–∫–∞–ø–∞")
    print("=" * 50)
    
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø
    backup_dir = find_latest_backup()
    if not backup_dir:
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –±—ç–∫–∞–ø —Å –ø–æ–º–æ—â—å—é: python backup_database.py")
        return
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ç–∫–∞–ø: {backup_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±—ç–∫–∞–ø–∞
    if not validate_backup(backup_dir):
        print("‚ùå –ë—ç–∫–∞–ø –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –æ—á–∏—Å—Ç–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ!")
    response = input("–û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º? (y/N): ")
    clear_existing = response.lower() in ['y', 'yes', '–¥–∞', '–¥']
    
    if clear_existing:
        print("üóëÔ∏è –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("üìù –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input("\\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): ")
    if confirm.lower() not in ['y', 'yes', '–¥–∞', '–¥']:
        print("‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    print("\\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    results = restore_with_dependencies(backup_dir, clear_existing)
    
    print("\\n" + "=" * 50)
    print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    successful = sum(1 for status in results.values() if status)
    total = len(results)
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {successful}/{total} —Ç–∞–±–ª–∏—Ü —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    if successful < total:
        print("\\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:")
        for table, status in results.items():
            if not status:
                print(f"   ‚ùå {table}")
    
    print("\\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Supabase Dashboard")
    print("   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É API endpoints")

if __name__ == "__main__":
    main()
