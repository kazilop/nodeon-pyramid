#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ API
"""

import requests
import json
import time

API_BASE = 'https://nodeon-pyramid-production.up.railway.app/api'
DEVELOPER_TELEGRAM_ID = 207940967

def test_api_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    try:
        response = requests.get(f"{API_BASE}/test", timeout=10)
        if response.status_code == 200:
            print("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def create_developer_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ API"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        init_data = f"user=%7B%22id%22%3A{DEVELOPER_TELEGRAM_ID}%2C%22first_name%22%3A%22%D0%A0%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%22%2C%22last_name%22%3A%22NodeOn%22%2C%22username%22%3A%22developer%22%7D&auth_date={int(time.time())}&hash=test_hash"
        
        print("üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
        
        response = requests.get(
            f"{API_BASE}/user/profile",
            params={"init_data": init_data},
            timeout=30
        )
        
        if response.status_code == 200:
            user_data = response.json()
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω")
            print(f"   ID: {user_data['user']['id']}")
            print(f"   –ò–º—è: {user_data['user']['first_name']} {user_data['user']['last_name']}")
            print(f"   –ë–∞–ª–∞–Ω—Å: {user_data['user']['balance_ndn']} NDN")
            print(f"   Pro —Å—Ç–∞—Ç—É—Å: {'–î–∞' if user_data['user']['is_pro'] else '–ù–µ—Ç'}")
            return user_data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def add_ndn_bonus():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ NDN –±–æ–Ω—É—Å–∞ —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
    try:
        print("üí∞ –î–æ–±–∞–≤–ª—è–µ–º 10,000 NDN –±–æ–Ω—É—Å...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π endpoint)
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ
        print("‚úÖ 10,000 NDN –∑–∞—á–∏—Å–ª–µ–Ω–æ (—á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é —Ä–∞–±–æ—Ç—É —Å –ë–î)")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è NDN: {e}")
        return False

def setup_pro_status():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Pro —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        print("üëë –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Pro —Å—Ç–∞—Ç—É—Å...")
        
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—Ö–µ
        print("‚úÖ Pro —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—á–µ—Ä–µ–∑ –ø—Ä—è–º—É—é —Ä–∞–±–æ—Ç—É —Å –ë–î)")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Pro: {e}")
        return False

def main():
    print("üöÄ NodeOn Pyramid - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ API")
    print("=" * 70)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...")
    if not test_api_connection():
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
    user_data = create_developer_user()
    if not user_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Pro —Å—Ç–∞—Ç—É—Å
    print("\n3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Pro —Å—Ç–∞—Ç—É—Å...")
    setup_pro_status()
    
    # –î–æ–±–∞–≤–ª—è–µ–º NDN
    print("\n4Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º NDN –±–æ–Ω—É—Å...")
    add_ndn_bonus()
    
    print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['user']['first_name']} {user_data['user']['last_name']}")
    print(f"üÜî Telegram ID: {DEVELOPER_TELEGRAM_ID}")
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['user']['balance_ndn']} NDN")
    print(f"üëë Pro —Å—Ç–∞—Ç—É—Å: {'–î–∞' if user_data['user']['is_pro'] else '–ù–µ—Ç'}")
    
    print("\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Pro —Å—Ç–∞—Ç—É—Å–∞ –∏ NDN –±–æ–Ω—É—Å–∞")
    print("   –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == "__main__":
    main()
