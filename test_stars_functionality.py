#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Stars
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
RAILWAY_URL = "https://nodeon-production.up.railway.app"
API_BASE = f"{RAILWAY_URL}/api"

def test_stars_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Stars"""
    print("‚≠ê –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Stars")
    print("-" * 40)
    
    try:
        response = requests.get(f"{API_BASE}/stars/config", timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                config = data.get('config', {})
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Stars —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –ö—É—Ä—Å: 1 Star = {config.get('stars_to_ndn_rate')} NDN")
                print(f"   –ú–∏–Ω–∏–º—É–º: {config.get('min_stars_purchase')} Stars")
                print(f"   –ú–∞–∫—Å–∏–º—É–º: {config.get('max_stars_purchase')} Stars")
                print(f"   –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–æ–∫—É–ø–∫—É: {config.get('stars_purchase_fee_percent')}%")
                print(f"   –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥: {config.get('stars_withdrawal_fee_percent')}%")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {data.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_stars_purchase():
    """–¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ NDN –∑–∞ Stars"""
    print("\nüí∞ –¢–µ—Å—Ç –ø–æ–∫—É–ø–∫–∏ NDN –∑–∞ Stars")
    print("-" * 40)
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram
    real_telegram_data = "query_id%3DAAFn7WQMAAAAAGftZAynMETx%26user%3D%257B%2522id%2522%253A207940967%252C%2522first_name%2522%253A%2522Fish%2522%252C%2522last_name%2522%253A%2522%2522%252C%2522username%2522%253A%2522NobodyYety%2522%252C%2522language_code%2522%253A%2522ru%2522%252C%2522is_premium%2522%253Atrue%252C%2522allows_write_to_pm%2522%253Atrue%252C%2522photo_url%2522%253A%2522https%253A%255C%252F%255C%252Ft.me%255C%252Fi%255C%252Fuserpic%255C%252F320%255C%252F6ZhmPb8VHMum-L3NuklXZIDjzwG5z3nmsPstk-j-X0Q.svg%2522%257D%26auth_date%3D1759595069%26signature%3DzaTxfsbclaZwvnfSR1fy86Yr9_TDYfYKlbdlIDCI0CZHOte_WZ8DHcUuIxv7RVqoiuiux-yZqP-ZMMNLSnefDQ%26hash%3D5bd316b59632460d35963101eac62a76f2538fb18b5958ad6f9114f0931e29f9"
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É 100 Stars
        response = requests.post(
            f"{API_BASE}/stars/buy-ndn",
            params={"init_data": real_telegram_data, "stars_amount": 100},
            timeout=10
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ –ü–æ–∫—É–ø–∫–∞ NDN –∑–∞ Stars —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –ö—É–ø–ª–µ–Ω–æ: {data.get('ndn_amount')} NDN")
                print(f"   –ó–∞: {data.get('stars_amount')} Stars")
                print(f"   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data.get('new_balance')} NDN")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {data.get('message')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_stars_withdrawal():
    """–¢–µ—Å—Ç –≤—ã–≤–æ–¥–∞ NDN –≤ Stars"""
    print("\nüí∏ –¢–µ—Å—Ç –≤—ã–≤–æ–¥–∞ NDN –≤ Stars")
    print("-" * 40)
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram
    real_telegram_data = "query_id%3DAAFn7WQMAAAAAGftZAynMETx%26user%3D%257B%2522id%2522%253A207940967%252C%2522first_name%2522%253A%2522Fish%2522%252C%2522last_name%2522%253A%2522%2522%252C%2522username%2522%253A%2522NobodyYety%2522%252C%2522language_code%2522%253A%2522ru%2522%252C%2522is_premium%2522%253Atrue%252C%2522allows_write_to_pm%2522%253Atrue%252C%2522photo_url%2522%253A%2522https%253A%255C%252F%255C%252Ft.me%255C%252Fi%255C%252Fuserpic%255C%252F320%255C%252F6ZhmPb8VHMum-L3NuklXZIDjzwG5z3nmsPstk-j-X0Q.svg%2522%257D%26auth_date%3D1759595069%26signature%3DzaTxfsbclaZwvnfSR1fy86Yr9_TDYfYKlbdlIDCI0CZHOte_WZ8DHcUuIxv7RVqoiuiux-yZqP-ZMMNLSnefDQ%26hash%3D5bd316b59632460d35963101eac62a76f2538fb18b5958ad6f9114f0931e29f9"
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ 50 NDN
        response = requests.post(
            f"{API_BASE}/stars/withdraw",
            params={"init_data": real_telegram_data, "ndn_amount": 50},
            timeout=10
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ –í—ã–≤–æ–¥ NDN –≤ Stars —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –í—ã–≤–µ–¥–µ–Ω–æ: {data.get('stars_amount')} Stars")
                print(f"   –ò–∑: {data.get('ndn_amount')} NDN")
                print(f"   –ö–æ–º–∏—Å—Å–∏—è: {data.get('withdrawal_fee')} NDN")
                print(f"   –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {data.get('new_balance')} NDN")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞: {data.get('message')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_yookassa_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Æ–ö–∞—Å—Å—ã"""
    print("\nüí≥ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Æ–ö–∞—Å—Å—ã")
    print("-" * 40)
    
    try:
        response = requests.get(f"{API_BASE}/yookassa/config", timeout=10)
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                config = data.get('config', {})
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Æ–ö–∞—Å—Å—ã —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   –ö—É—Ä—Å: 1 RUB = {config.get('rub_to_ndn_rate')} NDN")
                print(f"   –ú–∏–Ω–∏–º—É–º: {config.get('min_rub_purchase')} RUB")
                print(f"   –ú–∞–∫—Å–∏–º—É–º: {config.get('max_rub_purchase')} RUB")
                print(f"   Shop ID: {config.get('yookassa_shop_id')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {data.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_yookassa_payment():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É"""
    print("\nüí≥ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É")
    print("-" * 40)
    
    # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram
    real_telegram_data = "query_id%3DAAFn7WQMAAAAAGftZAynMETx%26user%3D%257B%2522id%2522%253A207940967%252C%2522first_name%2522%253A%2522Fish%2522%252C%2522last_name%2522%253A%2522%2522%252C%2522username%2522%253A%2522NobodyYety%2522%252C%2522language_code%2522%253A%2522ru%2522%252C%2522is_premium%2522%253Atrue%252C%2522allows_write_to_pm%2522%253Atrue%252C%2522photo_url%2522%253A%2522https%253A%255C%252F%255C%252Ft.me%255C%252Fi%255C%252Fuserpic%255C%252F320%255C%252F6ZhmPb8VHMum-L3NuklXZIDjzwG5z3nmsPstk-j-X0Q.svg%2522%257D%26auth_date%3D1759595069%26signature%3DzaTxfsbclaZwvnfSR1fy86Yr9_TDYfYKlbdlIDCI0CZHOte_WZ8DHcUuIxv7RVqoiuiux-yZqP-ZMMNLSnefDQ%26hash%3D5bd316b59632460d35963101eac62a76f2538fb18b5958ad6f9114f0931e29f9"
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ 1000 —Ä—É–±–ª–µ–π
        response = requests.post(
            f"{API_BASE}/yookassa/create-payment",
            params={"init_data": real_telegram_data, "amount_rub": 1000},
            timeout=10
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å—É —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                print(f"   Payment ID: {data.get('payment_id')}")
                print(f"   –°—É–º–º–∞: {data.get('amount_rub')} RUB")
                print(f"   NDN: {data.get('ndn_amount')} NDN")
                print(f"   URL: {data.get('payment_url')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {data.get('message')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                error_data = response.json()
                print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π')}")
            except:
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò STARS –ò –Æ–ö–ê–°–°–´")
    print("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    results.append(("Stars Config", test_stars_config()))
    results.append(("Stars Purchase", test_stars_purchase()))
    results.append(("Stars Withdrawal", test_stars_withdrawal()))
    results.append(("YooKassa Config", test_yookassa_config()))
    results.append(("YooKassa Payment", test_yookassa_payment()))
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_tests = len(results)
    passed_tests = sum(1 for _, status in results if status)
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    for name, status in results:
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"{status_icon} {name}")
    
    print(f"\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ Stars –∏ –Æ–ö–∞—Å—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print(f"\n‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ API")
    
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç –≤ Supabase")
    print("2. –û–±–Ω–æ–≤–∏—Ç–µ API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Stars")
    print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram Mini App")

if __name__ == "__main__":
    main()