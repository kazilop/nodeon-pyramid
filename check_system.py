#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
"""

import os
import requests
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    required_vars = [
        'SUPABASE_URL',
        'SUPABASE_ANON_KEY',
        'TELEGRAM_BOT_TOKEN',
        'DEVELOPER_TELEGRAM_ID'
    ]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if value:
            # –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if 'TOKEN' in var or 'KEY' in var:
                display_value = f"{value[:10]}...{value[-5:]}"
            else:
                display_value = value
            print(f"‚úÖ {var}: {display_value}")
        else:
            print(f"‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def check_supabase_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_ANON_KEY')
    
    if not supabase_url or not supabase_key:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Supabase –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    
    try:
        headers = {
            "apikey": supabase_key,
            "Authorization": f"Bearer {supabase_key}"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        url = f"{supabase_url}/rest/v1/nodeon_users?select=count"
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot"""
    
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not bot_token:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot...")
    
    try:
        url = f"https://api.telegram.org/bot{bot_token}/getMe"
        response = requests.get(url)
        
        if response.status_code == 200:
            result = response.json()
            if result.get("ok"):
                bot_info = result.get("result", {})
                print(f"‚úÖ Bot —Ä–∞–±–æ—Ç–∞–µ—Ç: @{bot_info.get('username')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Bot API: {result.get('description')}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bot API: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Bot: {e}")
        return False

def check_railway_app():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway"""
    
    railway_url = os.getenv('RAILWAY_URL')
    
    if not railway_url:
        print("‚ö†Ô∏è RAILWAY_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
        return True
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway: {railway_url}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response = requests.get(railway_url, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Railway —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        return False

def check_api_endpoints():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints"""
    
    railway_url = os.getenv('RAILWAY_URL')
    
    if not railway_url:
        print("‚ö†Ô∏è RAILWAY_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É API")
        return True
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints...")
    
    endpoints = [
        "/",
        "/api/auth/me",
        "/api/miner/check-tables"
    ]
    
    for endpoint in endpoints:
        try:
            url = f"{railway_url}{endpoint}"
            response = requests.get(url, timeout=10)
            
            if response.status_code in [200, 401, 422]:  # 401/422 - –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints
                print(f"‚úÖ {endpoint}: {response.status_code}")
            else:
                print(f"‚ö†Ô∏è {endpoint}: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {endpoint}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã NodeOn Pyramid")
    print("=" * 60)
    
    checks = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment_variables),
        ("Supabase", check_supabase_connection),
        ("Telegram Bot", check_telegram_bot),
        ("Railway App", check_railway_app)
    ]
    
    results = []
    
    for name, check_func in checks:
        print(f"\nüìã {name}:")
        result = check_func()
        results.append((name, result))
    
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    
    all_passed = True
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"   {name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 60)
    
    if all_passed:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.")
    
    print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup_database.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ setup_telegram_bot.py –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")
    print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")

if __name__ == "__main__":
    main()
