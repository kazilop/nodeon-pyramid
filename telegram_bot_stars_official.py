#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è NodeOn Pyramid —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Stars
–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º https://core.telegram.org/bots/payments-stars
"""

import logging
import asyncio
import requests
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, PreCheckoutQueryHandler, MessageHandler, filters
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = "7670372637:AAG7XWbNkhvNx_M4MI4118AYXvIsn3bRMDQ"
API_BASE = "https://nodeon-production.up.railway.app/api"
SUPABASE_URL = "https://ahxwpzgltlzlvrtrbanm.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFoeHdwemdsdGx6bHZydHJiYW5tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk1MDMxNDksImV4cCI6MjA3NTA3OTE0OX0.h4sMVhVwvRUiHgbevDgv9W1G2S__uDWPUSCiXdrEy4E"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_supabase_headers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è Supabase API"""
    return {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }

class NodeOnPyramidBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π"""
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("terms", self.terms_command))
        self.application.add_handler(CommandHandler("support", self.support_command))
        self.application.add_handler(CommandHandler("paysupport", self.paysupport_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        self.application.add_handler(PreCheckoutQueryHandler(self.pre_checkout_handler))
        self.application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, self.successful_payment_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å NDN", callback_data="buy_ndn")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard")],
            [InlineKeyboardButton("üìã –£—Å–ª–æ–≤–∏—è", callback_data="terms")],
            [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "üöÄ **NodeOn Pyramid**\n"
            "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —Å –º–æ–Ω–µ—Ç–∞–º–∏ NDN\n\n"
            "üíé **–ß—Ç–æ —Ç–∞–∫–æ–µ NDN?**\n"
            "NDN - —ç—Ç–æ –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ\n\n"
            "‚≠ê **–ü–æ–∫—É–ø–∫–∞ NDN**\n"
            "NDN –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∑–∞ Telegram Stars\n"
            "–ö—É—Ä—Å: 1 Star = 1 NDN\n\n"
            "üëë **Pro —Å—Ç–∞—Ç—É—Å**\n"
            "–ó–∞ 1000 NDN –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ Pro —Å—Ç–∞—Ç—É—Å –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def terms_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /terms - —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"""
        terms_text = (
            "üìã **–£–°–õ–û–í–ò–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø NODEON PYRAMID**\n\n"
            "**1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è**\n"
            "‚Ä¢ NDN - —ç—Ç–æ –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ\n"
            "‚Ä¢ –ü–æ–∫—É–ø–∫–∞ NDN –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∑–∞ Telegram Stars\n"
            "‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã, –∫—Ä–æ–º–µ —Å–ª—É—á–∞–µ–≤ –≤–æ–∑–≤—Ä–∞—Ç–∞\n\n"
            "**2. –ü–æ–∫—É–ø–∫–∞ NDN**\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: 10 Stars\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞: 10,000 Stars\n"
            "‚Ä¢ –ö—É—Ä—Å: 1 Star = 1 NDN\n"
            "‚Ä¢ –ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Telegram Stars\n\n"
            "**3. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤**\n"
            "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support\n"
            "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ Telegram Stars\n\n"
            "**4. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å**\n"
            "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Ç–µ—Ä—é NDN\n"
            "‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n"
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞\n\n"
            "**5. –ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n"
            "‚Ä¢ Telegram –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ù–ï –ø–æ–º–æ–∂–µ—Ç —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
            "‚Ä¢ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ /support\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏."
        )
        
        await update.message.reply_text(terms_text, parse_mode='Markdown')
    
    async def support_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /support - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"""
        support_text = (
            "üÜò **–ü–û–î–î–ï–†–ñ–ö–ê NODEON PYRAMID**\n\n"
            "**–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
            "‚Ä¢ Telegram: @your_support_bot\n"
            "‚Ä¢ Email: support@yourdomain.com\n"
            "‚Ä¢ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 24 —á–∞—Å–æ–≤\n\n"
            "**–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–ª–∞—Ç–µ–∂–µ–π:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /paysupport\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏\n"
            "‚Ä¢ Telegram –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ù–ï –ø–æ–º–æ–∂–µ—Ç —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏\n\n"
            "**–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**\n"
            "‚Ä¢ –ö–∞–∫ –∫—É–ø–∏—Ç—å NDN? - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ö—É–ø–∏—Ç—å NDN'\n"
            "‚Ä¢ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Pro —Å—Ç–∞—Ç—É—Å? - –ö—É–ø–∏—Ç–µ –∑–∞ 1000 NDN\n"
            "‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞? - –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n\n"
            "**–í–∞–∂–Ω–æ:** Telegram –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ –ø–æ–º–æ–∂–µ—Ç —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞!"
        )
        
        await update.message.reply_text(support_text, parse_mode='Markdown')
    
    async def paysupport_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /paysupport - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"""
        paysupport_text = (
            "üí≥ **–ü–û–î–î–ï–†–ñ–ö–ê –ü–û –ü–õ–ê–¢–ï–ñ–ê–ú**\n\n"
            "**–ï—Å–ª–∏ —É –≤–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏:**\n\n"
            "**1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å Stars**\n"
            "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars\n"
            "‚Ä¢ –ö—É–ø–∏—Ç–µ Stars —á–µ—Ä–µ–∑ @PremiumBot\n\n"
            "**2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç**\n"
            "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n\n"
            "**3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É**\n"
            "‚Ä¢ Telegram: @your_support_bot\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞\n"
            "‚Ä¢ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ\n\n"
            "**4. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤**\n"
            "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID –ø–ª–∞—Ç–µ–∂–∞\n"
            "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤ Telegram Stars\n\n"
            "**–í–∞–∂–Ω–æ:** Telegram –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ù–ï –ø–æ–º–æ–∂–µ—Ç —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞!"
        )
        
        await update.message.reply_text(paysupport_text, parse_mode='Markdown')
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "buy_ndn":
            await self.show_buy_options(query, context)
        elif query.data == "stats":
            await self.show_stats(query, context)
        elif query.data == "leaderboard":
            await self.show_leaderboard(query, context)
        elif query.data == "terms":
            await self.terms_command(update, context)
        elif query.data == "support":
            await self.support_command(update, context)
        elif query.data.startswith("buy_"):
            amount = query.data.split("_")[1]
            await self.create_invoice(query, context, amount)
    
    async def show_buy_options(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∫—É–ø–∫–∏ NDN"""
        keyboard = [
            [InlineKeyboardButton("üí∞ 100 NDN (100 Stars)", callback_data="buy_100")],
            [InlineKeyboardButton("üí∞ 500 NDN (500 Stars)", callback_data="buy_500")],
            [InlineKeyboardButton("üí∞ 1000 NDN (1000 Stars)", callback_data="buy_1000")],
            [InlineKeyboardButton("üí∞ 5000 NDN (5000 Stars)", callback_data="buy_5000")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üí∞ **–ü–û–ö–£–ü–ö–ê NDN**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NDN –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
            "üíé **–ö—É—Ä—Å:** 1 Star = 1 NDN\n"
            "‚≠ê **–ú–∏–Ω–∏–º—É–º:** 10 Stars\n"
            "‚≠ê **–ú–∞–∫—Å–∏–º—É–º:** 10,000 Stars\n\n"
            "**–í–∞–∂–Ω–æ:** –ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Telegram Stars"
        )
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def create_invoice(self, query, context, amount):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ NDN"""
        try:
            user_id = query.from_user.id
            amount_int = int(amount)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if amount_int < 10 or amount_int > 10000:
                await query.edit_message_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞!\n\n"
                    "–ú–∏–Ω–∏–º—É–º: 10 Stars\n"
                    "–ú–∞–∫—Å–∏–º—É–º: 10,000 Stars"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            await context.bot.send_invoice(
                chat_id=user_id,
                title=f"–ü–æ–∫—É–ø–∫–∞ {amount_int} NDN",
                description=f"–ü–æ–∫—É–ø–∫–∞ {amount_int} NDN –∑–∞ {amount_int} Telegram Stars",
                payload=f"ndn_purchase_{user_id}_{amount_int}_{int(time.time())}",
                provider_token="",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                currency="XTR",     # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ XTR –¥–ª—è Stars
                prices=[LabeledPrice("NDN", amount_int * 100)],  # –í –∫–æ–ø–µ–π–∫–∞—Ö
                start_parameter="ndn_purchase"
            )
            
            await query.edit_message_text(
                f"üí≥ **–ò–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω!**\n\n"
                f"üí∞ –°—É–º–º–∞: {amount_int} NDN\n"
                f"‚≠ê –°—Ç–æ–∏–º–æ—Å—Ç—å: {amount_int} Stars\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'Pay' –≤ –∏–Ω–≤–æ–π—Å–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã."
            )
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support"
            )
    
    async def pre_checkout_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout –∑–∞–ø—Ä–æ—Å–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"""
        query = update.pre_checkout_query
        
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂
            validation_result = await self.validate_payment(query)
            
            if validation_result['success']:
                await query.answer(ok=True)
            else:
                await query.answer(ok=False, error_message=validation_result['message'])
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await query.answer(ok=False, error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    
    async def validate_payment(self, query):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É
            if query.currency != "XTR":
                return {"success": False, "message": "–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Stars."}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
            amount = query.total_amount / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫
            if amount < 10 or amount > 10000:
                return {"success": False, "message": "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10 –¥–æ 10,000 Stars."}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑–µ—Ä–≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
            wallet_response = requests.post(
                f"{SUPABASE_URL}/rest/v1/rpc/get_server_wallet_balance",
                headers=get_supabase_headers(),
                json={}
            )
            
            if wallet_response.status_code == 200:
                wallet_data = wallet_response.json()
                if wallet_data.get('success'):
                    wallet = wallet_data.get('wallet')
                    if wallet.get('balance_ndn') < amount:
                        return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NDN –≤ —Ä–µ–∑–µ—Ä–≤–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
            
            return {"success": True, "message": "–ü–ª–∞—Ç–µ–∂ –≤–∞–ª–∏–¥–µ–Ω"}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"}
    
    async def successful_payment_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"""
        payment = update.message.successful_payment
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
            result = await self.process_payment(payment, update.effective_user)
            
            if result['success']:
                await update.message.reply_text(
                    f"‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
                    f"üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** {result['ndn_amount']} NDN\n"
                    f"‚≠ê **–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:** {result['stars_amount']} Stars\n"
                    f"üí≥ **ID –ø–ª–∞—Ç–µ–∂–∞:** `{payment.telegram_payment_charge_id}`\n\n"
                    f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    f"‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞**\n\n"
                    f"**–ü—Ä–∏—á–∏–Ω–∞:** {result['message']}\n\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support\n"
                    f"ID –ø–ª–∞—Ç–µ–∂–∞: `{payment.telegram_payment_charge_id}`",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await update.message.reply_text(
                "‚ùå **–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞**\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support\n"
                f"ID –ø–ª–∞—Ç–µ–∂–∞: `{payment.telegram_payment_charge_id}`",
                parse_mode='Markdown'
            )
    
    async def process_payment(self, payment, user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            user_id = user.id
            telegram_payment_charge_id = payment.telegram_payment_charge_id
            total_amount = payment.total_amount
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NDN (1 Star = 1 NDN)
            stars_amount = total_amount / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫
            ndn_amount = stars_amount
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
            purchase_response = requests.post(
                f"{SUPABASE_URL}/rest/v1/rpc/process_stars_purchase",
                headers=get_supabase_headers(),
                json={
                    "p_user_id": user_id,
                    "p_stars_amount": stars_amount,
                    "p_ndn_amount": ndn_amount,
                    "p_payment_id": telegram_payment_charge_id
                }
            )
            
            if purchase_response.status_code == 200:
                data = purchase_response.json()
                if data.get('success'):
                    return {
                        "success": True,
                        "ndn_amount": ndn_amount,
                        "stars_amount": stars_amount,
                        "transaction_id": data.get('transaction_id')
                    }
                else:
                    return {"success": False, "message": data.get('error')}
            else:
                return {"success": False, "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"}
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {"success": False, "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"}
    
    async def show_stats(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = query.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = requests.get(
                f"{API_BASE}/user/profile",
                params={"init_data": f"user_id={user_id}"}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    user = data.get('user')
                    
                    stats_text = (
                        f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n\n"
                        f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.get('first_name')}\n"
                        f"üí∞ **–ë–∞–ª–∞–Ω—Å NDN:** {user.get('balance_ndn')} NDN\n"
                        f"‚≠ê **–ë–∞–ª–∞–Ω—Å Stars:** {user.get('balance_stars')} Stars\n"
                        f"üëë **Pro —Å—Ç–∞—Ç—É—Å:** {'–î–∞' if user.get('is_pro') else '–ù–µ—Ç'}\n\n"
                        f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Stars:**\n"
                        f"‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.get('total_stars_earned')} Stars\n"
                        f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.get('total_stars_spent')} Stars"
                    )
                    
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def show_leaderboard(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏–¥–µ—Ä–±–æ—Ä–¥
            response = requests.get(f"{API_BASE}/stats/leaderboard")
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    leaders = data.get('leaders', [])
                    
                    leaderboard_text = "üèÜ **–õ–ò–î–ï–†–ë–û–†–î**\n\n"
                    
                    for i, leader in enumerate(leaders[:10], 1):
                        crown = "üëë" if leader.get('is_pro') else ""
                        leaderboard_text += f"{i}. {leader.get('first_name')} {crown}\n"
                        leaderboard_text += f"   üí∞ {leader.get('balance_ndn')} NDN\n\n"
                    
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(leaderboard_text, reply_markup=reply_markup, parse_mode='Markdown')
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ NodeOn Pyramid Bot...")
        self.application.run_polling()

if __name__ == "__main__":
    bot = NodeOnPyramidBot()
    bot.run()
