#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü NodeOn –≤ Supabase
"""

import os
from sqlalchemy import create_engine, text
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_nodeon_tables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü NodeOn"""
    
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    try:
        engine = create_engine(database_url)
        
        with engine.connect() as conn:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü NodeOn
            result = conn.execute(text("""
                SELECT table_name, column_name, data_type 
                FROM information_schema.columns 
                WHERE table_schema = 'public' 
                AND table_name LIKE 'nodeon_%'
                ORDER BY table_name, ordinal_position
            """))
            
            tables = {}
            for row in result:
                table_name = row[0]
                column_name = row[1]
                data_type = row[2]
                
                if table_name not in tables:
                    tables[table_name] = []
                
                tables[table_name].append({
                    'column': column_name,
                    'type': data_type
                })
            
            print("üìä –¢–∞–±–ª–∏—Ü—ã NodeOn –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
            print()
            
            if tables:
                for table_name, columns in tables.items():
                    print(f"‚úÖ {table_name}:")
                    for col in columns:
                        print(f"   - {col['column']}: {col['type']}")
                    print()
                
                print(f"üéâ –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü NodeOn: {len(tables)}")
                return True
            else:
                print("‚ùå –¢–∞–±–ª–∏—Ü—ã NodeOn –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def test_insert():
    """–¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    try:
        engine = create_engine(database_url)
        
        with engine.connect() as conn:
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn.execute(text("""
                INSERT INTO nodeon_users (telegram_id, username, first_name, balance_ndn, is_pro)
                VALUES (123456789, 'testuser', 'Test User', 1000, true)
                ON CONFLICT (telegram_id) DO NOTHING
            """))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = conn.execute(text("""
                SELECT * FROM nodeon_users WHERE telegram_id = 123456789
            """))
            
            user = result.fetchone()
            if user:
                print("‚úÖ –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–µ–Ω!")
                print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[3]} (ID: {user[0]})")
                return True
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –≤—Å—Ç–∞–≤–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü NodeOn –≤ Supabase...")
    print()
    
    if check_nodeon_tables():
        print()
        print("üß™ –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        if test_insert():
            print()
            print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö NodeOn –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞!")
            print("   –ú–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Vercel")
        else:
            print()
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    else:
        print()
        print("‚ùå –¢–∞–±–ª–∏—Ü—ã NodeOn –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    main()
