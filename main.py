#!/usr/bin/env python3
"""
NodeOn Crypto API - –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 12 —è–∑—ã–∫–æ–≤
"""

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import requests
import json
import os
import hashlib
import hmac
import urllib.parse
import time
from typing import Optional
from datetime import datetime
from typing import Optional, Dict, Any

app = FastAPI(title="NodeOn Crypto API", version="2.0.0")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
DEVELOPER_TELEGRAM_ID = 207940967  # Fish (ID: 5) - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫

# –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_STATUSES = {
    "user": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    "developer": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", 
    "operator": "–û–ø–µ—Ä–∞—Ç–æ—Ä",
    "bankir": "–ë–∞–Ω–∫–∏—Ä"
}

# –°–∏—Å—Ç–µ–º–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
class Localization:
    def __init__(self):
        self.translations = {}
        self.load_translations()
    
    def load_translations(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤ locales/"""
        locales_dir = "locales"
        
        if not os.path.exists(locales_dir):
            print(f"ERROR: Directory {locales_dir} not found")
            return
        
        for filename in os.listdir(locales_dir):
            if filename.endswith('.json'):
                language = filename[:-5]  # –£–±–∏—Ä–∞–µ–º .json
                filepath = os.path.join(locales_dir, filename)
                
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        self.translations[language] = json.load(f)
                    print(f"SUCCESS: Language loaded: {language}")
                except Exception as e:
                    print(f"ERROR: Error loading {language}: {e}")
    
    def get_language_from_telegram_user(self, telegram_user: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram"""
        if not telegram_user:
            return "ru"
        
        language_code = telegram_user.get('language_code', '')
        
        # –ú–∞–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤ Telegram –Ω–∞ –Ω–∞—à–∏ —è–∑—ã–∫–∏
        language_mapping = {
            'ru': 'ru', 'uk': 'ru', 'be': 'ru', 'kz': 'ru', 'uz': 'ru',
            'en': 'en', 'en-US': 'en', 'en-GB': 'en',
            'es': 'es', 'es-ES': 'es', 'es-MX': 'es',
            'de': 'de', 'de-DE': 'de', 'de-AT': 'de',
            'fr': 'fr', 'fr-FR': 'fr', 'fr-CA': 'fr',
            'zh': 'zh', 'zh-CN': 'zh', 'zh-TW': 'zh',
            'ja': 'ja', 'ja-JP': 'ja',
            'ko': 'ko', 'ko-KR': 'ko',
            'ar': 'ar', 'ar-SA': 'ar', 'ar-EG': 'ar',
            'pt': 'pt', 'pt-BR': 'pt', 'pt-PT': 'pt',
            'it': 'it', 'it-IT': 'it',
            'hi': 'hi', 'hi-IN': 'hi'
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞
        if language_code in language_mapping:
            return language_mapping[language_code]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Å–∏–º–≤–æ–ª–∞
        short_code = language_code[:2] if language_code else ''
        if short_code in language_mapping:
            return language_mapping[short_code]
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
        return "ru"
    
    def t(self, key: str, language: str = "ru", **kwargs) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É"""
        keys = key.split('.')
        current = self.translations.get(language, self.translations.get("ru", {}))
        
        for k in keys:
            if isinstance(current, dict) and k in current:
                current = current[k]
            else:
                # Fallback –Ω–∞ —Ä—É—Å—Å–∫–∏–π
                current = self.translations.get("ru", {})
                for k in keys:
                    if isinstance(current, dict) and k in current:
                        current = current[k]
                    else:
                        return key
        
        result = current if isinstance(current, str) else key
        
        # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if kwargs:
            try:
                result = result.format(**kwargs)
            except:
                pass
        
        return result

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
i18n = Localization()

def get_user_language(telegram_user: Dict[str, Any]) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return i18n.get_language_from_telegram_user(telegram_user)

def translate(key: str, language: str = "ru", **kwargs) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    return i18n.t(key, language, **kwargs)

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
class InvoiceRequest(BaseModel):
    amount_ndn: int
    description: str = "–ü–æ–∫—É–ø–∫–∞ NDN –∑–∞ Telegram Stars"

class PreCheckoutQuery(BaseModel):
    id: str
    from_user: Dict[str, Any]
    currency: str
    total_amount: int
    invoice_payload: str

class SuccessfulPayment(BaseModel):
    currency: str
    total_amount: int
    invoice_payload: str
    telegram_payment_charge_id: str
    provider_payment_charge_id: str

class ExchangeNDNRequest(BaseModel):
    amount_ndn: int
    description: str = "–û–±–º–µ–Ω NDN –Ω–∞ Telegram Stars"

class ExchangeRequest(BaseModel):
    amount_ndn: int
    telegram_username: str
    description: str = "–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω NDN –Ω–∞ Telegram Stars"

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
SUPABASE_URL = "https://ahxwpzgltlzlvrtrbanm.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFoeHdwemdsdGx6bHZydHJiYW5tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk1MDMxNDksImV4cCI6MjA3NTA3OTE0OX0.h4sMVhVwvRUiHgbevDgv9W1G2S__uDWPUSCiXdrEy4E"

# Telegram Bot Token
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7670372637:AAG7XWbNkhvNx_M4MI4118AYXvIsn3bRMDQ")

# Telegram Bot API URL
TELEGRAM_BOT_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
def load_achievements():
    try:
        with open('achievements.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []

def load_shops():
    try:
        with open('shops.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
def create_invoice_link(amount_stars: int, description: str, payload: str) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å—á–µ—Ç –¥–ª—è Telegram Mini App"""
    url = f"{TELEGRAM_BOT_API_URL}/createInvoiceLink"
    
    data = {
        "title": "–ü–æ–∫—É–ø–∫–∞ NDN",
        "description": description,
        "payload": payload,
        "provider_token": "",  # –ü—É—Å—Ç–æ–π –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        "currency": "XTR",  # Telegram Stars
        "prices": [{"label": "NDN", "amount": amount_stars}]
    }
    
    print(f"üîó Creating invoice link for {amount_stars} stars")
    print(f"üìã Data: {data}")
    
    try:
        response = requests.post(url, json=data, timeout=10)
        result = response.json()
        print(f"üì§ Invoice link response: {result}")
        return result
    except Exception as e:
        print(f"‚ùå Error creating invoice link: {e}")
        return {"ok": False, "error": str(e)}

def answer_pre_checkout_query(query_id: str, ok: bool, error_message: str = None) -> Dict[str, Any]:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞"""
    url = f"{TELEGRAM_BOT_API_URL}/answerPreCheckoutQuery"
    
    data = {
        "pre_checkout_query_id": query_id,
        "ok": ok
    }
    
    if not ok and error_message:
        data["error_message"] = error_message
    
    response = requests.post(url, json=data)
    return response.json()

def refund_star_payment(telegram_payment_charge_id: str, amount: int) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ Telegram Stars"""
    url = f"{TELEGRAM_BOT_API_URL}/refundStarPayment"
    
    data = {
        "user_id": 0,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ
        "telegram_payment_charge_id": telegram_payment_charge_id,
        "amount": amount
    }
    
    response = requests.post(url, json=data)
    return response.json()

def get_bot_stars_balance() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å Stars –±–æ—Ç–∞"""
    url = f"{TELEGRAM_BOT_API_URL}/getMyStarsBalance"
    
    try:
        response = requests.post(url, timeout=10)
        result = response.json()
        print(f"üí∞ Bot stars balance: {result}")
        return result
    except Exception as e:
        print(f"‚ùå Error getting bot stars balance: {e}")
        return {"ok": False, "error": str(e)}

def send_stars(user_id: int, amount: int) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    url = f"{TELEGRAM_BOT_API_URL}/sendStars"
    
    data = {
        "chat_id": user_id,
        "amount": amount
    }
    
    print(f"‚≠ê Sending {amount} stars to user {user_id}")
    
    try:
        response = requests.post(url, json=data, timeout=10)
        result = response.json()
        print(f"üì§ Send stars response: {result}")
        return result
    except Exception as e:
        print(f"‚ùå Error sending stars: {e}")
        return {"ok": False, "error": str(e)}


def get_supabase_headers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è Supabase API"""
    return {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json",
        "Prefer": "return=representation"
    }


def verify_telegram_auth(init_data: str) -> Dict[str, Any]:
    """–°—Ç—Ä–æ–≥–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not init_data or init_data.strip() == "":
            raise ValueError(translate("errors.auth_required"))
        
        # URL –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        decoded_data = urllib.parse.unquote(init_data)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = {}
        for item in decoded_data.split('&'):
            if '=' in item:
                key, value = item.split('=', 1)
                data[key] = value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['user', 'auth_date', 'hash']
        for field in required_fields:
            if field not in data:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ Telegram: {field}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º user –¥–∞–Ω–Ω—ã–µ
        try:
            user_data = json.loads(data['user'])
            if 'id' not in user_data:
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram")
        except json.JSONDecodeError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_date
        try:
            auth_date = int(data['auth_date'])
            if datetime.now().timestamp() - auth_date > 86400:  # 24 —á–∞—Å–∞
                raise ValueError("–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
        except ValueError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        # –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–î–ü–ò–°–ò (–±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        if not verify_telegram_signature(init_data):
            print("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
            # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if not user_data.get('id') or not user_data.get('first_name'):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"‚úÖ Successfully verified Telegram user: {user_data.get('first_name')} (@{user_data.get('username')}) ID: {user_data.get('id')}")
        return user_data
        
    except Exception as e:
        print(f"‚ùå Telegram auth error: {e}")
        raise ValueError(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram: {str(e)}")

def verify_telegram_signature(init_data: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram –¥–∞–Ω–Ω—ã—Ö"""
    try:
        data = {}
        for item in init_data.split('&'):
            if '=' in item:
                key, value = item.split('=', 1)
                data[key] = value
        
        if 'hash' not in data:
            return False
        
        received_hash = data.pop('hash')
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(data.items())])
        
        secret_key = hmac.new(
            "WebAppData".encode(),
            TELEGRAM_BOT_TOKEN.encode(),
            hashlib.sha256
        ).digest()
        
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()
        
        return hmac.compare_digest(received_hash, calculated_hash)
        
    except Exception as e:
        print(f"‚ùå Signature verification error: {e}")
        return False

def get_or_create_user(telegram_user: Dict[str, Any], referral_token: str = None) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase"""
    telegram_id = telegram_user.get('id')
    if not telegram_id:
        raise HTTPException(status_code=400, detail="Invalid user data")
    
    headers = get_supabase_headers()
    
    try:
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{telegram_id}",
            headers=headers
        )
        
        if response.status_code == 200:
            users = response.json()
            if users:
                user = users[0]
                print(f"‚úÖ Existing user found: {user.get('first_name', 'Unknown')} (ID: {user['id']}) Telegram ID: {user.get('telegram_id')} Balance: {user.get('balance_ndn', 0)} NDN")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if user.get('telegram_id') != telegram_id:
                    print(f"‚ö†Ô∏è Telegram ID mismatch! Expected: {telegram_id}, Found: {user.get('telegram_id')}")
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    delete_response = requests.delete(
                        f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}",
                        headers=headers
                    )
                    if delete_response.status_code == 204:
                        print(f"üóëÔ∏è Deleted incorrect user with ID {user['id']}")
                    else:
                        print(f"‚ùå Failed to delete incorrect user: {delete_response.status_code}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                else:
                    # –ë–∞–ª–∞–Ω—Å NDN –ø–æ–∫—É–ø–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ Telegram Stars
                    print(f"üí∞ User balance: {user.get('balance_ndn', 0)} NDN (purchased with Stars only)")
                    return user
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        first_name = telegram_user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        username = telegram_user.get('username', '')
        last_name = telegram_user.get('last_name', '')
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        inviter_id = None
        referral_path = ""
        referral_level = 0
        
        if referral_token and referral_token.startswith('ref_'):
            try:
                inviter_id = int(referral_token.replace('ref_', ''))
                print(f"üîó Referral registration: {first_name} invited by user {inviter_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                inviter_response = requests.get(
                    f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{inviter_id}",
                    headers=headers
                )
                
                if inviter_response.status_code == 200:
                    inviter_users = inviter_response.json()
                    if inviter_users:
                        inviter = inviter_users[0]
                        inviter_path = inviter.get('referral_path', '')
                        referral_path = f"{inviter_path}{inviter_id}," if inviter_path else f"{inviter_id},"
                        referral_level = inviter.get('referral_level', 0) + 1
                        
                        print(f"üìä Referral path: {referral_path}, Level: {referral_level}")
            except ValueError:
                print(f"‚ö†Ô∏è Invalid referral token: {referral_token}")
        
        print(f"üÜï Creating new user: {first_name} (@{username}) ID: {telegram_id}")
        
        user_data = {
            "telegram_id": telegram_id,
            "username": username,
            "first_name": first_name,
            "last_name": last_name,
            "balance_ndn": 0.0,  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 0 NDN - –ø–æ–∫—É–ø–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞ Stars
            "balance_stars": 0.0,
            "total_stars_earned": 0.0,
            "total_stars_spent": 0.0,
            "is_pro": False,
            "referral_link": "",
            "inviter_id": inviter_id,
            "referral_path": referral_path,
            "referral_level": referral_level,
            "is_active": True
        }
        
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/nodeon_users",
            headers=headers,
            json=user_data
        )
        
        if response.status_code == 201:
            created_user = response.json()[0]
            print(f"‚úÖ New user created: {created_user.get('first_name', 'Unknown')} (ID: {created_user['id']}) Balance: {created_user.get('balance_ndn', 0)} NDN (Stars purchase required)")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            for level in range(1, 8):
                stats_data = {
                    "user_id": created_user["id"],
                    "level": level,
                    "total_referrals": 0,
                    "total_earnings": 0.0
                }
                
                requests.post(
                    f"{SUPABASE_URL}/rest/v1/nodeon_referral_stats",
                    headers=headers,
                    json=stats_data
                )
            
            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –Ω–∞–≥—Ä–∞–¥—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ PRO —Å—Ç–∞—Ç—É—Å–∞
            if inviter_id:
                print(f"üîó Referral link created: {first_name} invited by user {inviter_id}")
                print("üí∞ Rewards will be distributed when user purchases PRO status")
            
            return created_user
        else:
            print(f"‚ùå Failed to create user: {response.text}")
            raise HTTPException(status_code=500, detail="Database error")
            
    except Exception as e:
        print(f"‚ùå Database error: {e}")
        raise HTTPException(status_code=500, detail="Database error")

@app.get("/", response_class=HTMLResponse)
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–≥—Ä–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    try:
        with open("index.html", "r", encoding="utf-8") as f:
            return HTMLResponse(content=f.read(), status_code=200)
    except FileNotFoundError:
        return HTMLResponse(content="""
        <!DOCTYPE html>
        <html>
        <head><title>NodeOn Crypto</title></head>
        <body>
            <h1>NodeOn Crypto API</h1>
            <p>API —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–µ—Ä—Å–∏—è 2.0.0</p>
            <p>–§–∞–π–ª index.html –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>
        </body>
        </html>
        """, status_code=200)

@app.get("/api/test")
async def api_test_endpoint():
    return {"message": "NodeOn Crypto API is working", "status": "ok", "version": "2.0.0"}

@app.get("/api/languages")
async def get_available_languages():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
    languages = []
    for lang_code, translations in i18n.translations.items():
        app_info = translations.get('app', {})
        languages.append({
            "code": lang_code,
            "name": app_info.get("name", "NodeOn Crypto"),
            "description": app_info.get("description", ""),
            "native_name": translations.get('language', {}).get(lang_code, lang_code.upper())
        })
    
    return {
        "success": True,
        "languages": languages,
        "default": "ru"
    }

@app.get("/api/users/find-by-id/{user_id}")
async def find_user_by_id(user_id: int):
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–≥—Ä–æ–≤–æ–º—É ID"""
    try:
        headers = get_supabase_headers()
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user_id}",
            headers=headers
        )
        
        if response.status_code == 200:
            users = response.json()
            if users:
                user = users[0]
                return {
                    "success": True,
                    "user": {
                        "id": user["id"],
                        "first_name": user["first_name"],
                        "username": user["username"],
                        "telegram_id": user["telegram_id"]
                    }
                }
            else:
                return {
                    "success": False,
                    "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
        else:
            return {
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            }
            
    except Exception as e:
        print(f"Error finding user by ID: {e}")
        return {
            "success": False,
            "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }

class TransferRequest(BaseModel):
    from_user_id: int
    to_user_id: int
    amount: float
    description: str = ""

@app.post("/api/transfers/ndn")
async def transfer_ndn(request: TransferRequest):
    """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ NDN –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        print(f"üîÑ Transfer request: {request.amount} NDN from user {request.from_user_id} to user {request.to_user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        headers = get_supabase_headers()
        from_user_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{request.from_user_id}",
            headers=headers
        )
        
        if from_user_response.status_code != 200:
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"}
        
        from_users = from_user_response.json()
        if not from_users:
            return {"success": False, "message": "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        from_user = from_users[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if from_user["balance_ndn"] < request.amount:
            return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NDN –Ω–∞ –±–∞–ª–∞–Ω—Å–µ"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        to_user_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{request.to_user_id}",
            headers=headers
        )
        
        if to_user_response.status_code != 200:
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è"}
        
        to_users = to_user_response.json()
        if not to_users:
            return {"success": False, "message": "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        to_user = to_users[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        new_from_balance = from_user["balance_ndn"] - request.amount
        new_to_balance = to_user["balance_ndn"] + request.amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        from_update_response = requests.patch(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{request.from_user_id}",
            headers=headers,
            json={"balance_ndn": new_from_balance}
        )
        
        if from_update_response.status_code != 200:
            print(f"‚ùå Failed to update sender balance: {from_update_response.status_code}")
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        to_update_response = requests.patch(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{request.to_user_id}",
            headers=headers,
            json={"balance_ndn": new_to_balance}
        )
        
        if to_update_response.status_code != 200:
            print(f"‚ùå Failed to update receiver balance: {to_update_response.status_code}")
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            requests.patch(
                f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{request.from_user_id}",
                headers=headers,
                json={"balance_ndn": from_user["balance_ndn"]}
            )
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"}
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_data = {
            "user_id": request.from_user_id,
            "type": "transfer_out",
            "amount_ndn": -request.amount,
            "description": f"–ü–µ—Ä–µ–≤–æ–¥ –∏–≥—Ä–æ–∫—É {to_user['first_name']} (ID: {request.to_user_id})",
            "created_at": "now()"
        }
        
        requests.post(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions",
            headers=headers,
            json=transaction_data
        )
        
        transaction_data = {
            "user_id": request.to_user_id,
            "type": "transfer_in",
            "amount_ndn": request.amount,
            "description": f"–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –∏–≥—Ä–æ–∫–∞ {from_user['first_name']} (ID: {request.from_user_id})",
            "created_at": "now()"
        }
        
        requests.post(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions",
            headers=headers,
            json=transaction_data
        )
        
        print(f"‚úÖ Transfer successful: {request.amount} NDN from {from_user['first_name']} to {to_user['first_name']}")
        print(f"üí∞ New balances - From: {new_from_balance} NDN, To: {new_to_balance} NDN")
        
        return {
            "success": True,
            "message": "–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            "from_balance": new_from_balance,
            "to_balance": new_to_balance
        }
        
    except Exception as e:
        print(f"Error in transfer: {e}")
        return {"success": False, "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}

@app.get("/api/user/profile")
async def get_user_profile(request: Request, referral_token: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∑—ã–∫–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º init_data –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
        auth_header = request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="Telegram Mini App authorization required")
        
        init_data = auth_header.replace("tma ", "")
        if not init_data or init_data.strip() == "":
            raise HTTPException(status_code=401, detail="Telegram init_data required")
        
        telegram_user = verify_telegram_auth(init_data)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        if referral_token:
            print(f"üîó Processing referral token: {referral_token}")
        else:
            print("‚ÑπÔ∏è No referral token provided")
        
        user = get_or_create_user(telegram_user, referral_token)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_language = get_user_language(telegram_user)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        headers = get_supabase_headers()
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_referral_stats?user_id=eq.{user['id']}",
            headers=headers
        )
        
        referral_stats = []
        if response.status_code == 200:
            referral_stats = response.json()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è Pro –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        referral_link = None
        if user.get('is_pro'):
            referral_link = f"https://t.me/pro_stars_bot?startapp=ref_{user['id']}"
        
        return {
            "success": True,
            "language": user_language,
            "user": {
                "id": user['id'],
                "telegram_id": user['telegram_id'],
                "username": user.get('username'),
                "first_name": user.get('first_name'),
                "last_name": user.get('last_name'),
                "balance_ndn": float(user.get('balance_ndn', 0)),
                "balance_stars": float(user.get('balance_stars', 0)),
                "total_stars_earned": float(user.get('total_stars_earned', 0)),
                "total_stars_spent": float(user.get('total_stars_spent', 0)),
                "is_pro": user.get('is_pro', False),
                "referral_link": referral_link,
                "created_at": user.get('created_at')
            },
            "referral_stats": referral_stats,
            "translations": {
                "app_name": translate("app.name", user_language),
                "welcome_title": translate("welcome.title", user_language),
                "balance_ndn": translate("user.balance_ndn", user_language),
                "balance_stars": translate("user.balance_stars", user_language),
                "pro_status": translate("user.pro_status", user_language),
                "buy_pro": translate("buttons.buy_pro", user_language),
                "buy_ndn": translate("buttons.buy_ndn", user_language),
                "withdraw_ndn": translate("buttons.withdraw_ndn", user_language),
                "referrals": translate("buttons.referrals", user_language),
                "leaderboard": translate("buttons.leaderboard", user_language),
                "rules": translate("buttons.rules", user_language)
            }
        }
        
    except ValueError as e:
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        print(f"Error getting user profile: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/user/create")
async def create_user(request: Request):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_header = request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram")
        
        init_data = auth_header[4:]  # –£–±–∏—Ä–∞–µ–º "tma "
        telegram_user = verify_telegram_auth(init_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.json()
        telegram_id = body.get("telegram_id")
        username = body.get("username", "")
        first_name = body.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        last_name = body.get("last_name", "")
        
        if not telegram_id:
            raise HTTPException(status_code=400, detail="Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "id": telegram_id,
            "first_name": first_name,
            "last_name": last_name,
            "username": username
        }
        
        user = get_or_create_user(user_data)
        
        return {
            "success": True,
            "user": user
        }
        
    except ValueError as e:
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        print(f"Error creating user: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/translations/{language}")
async def get_translations(language: str):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
    if language not in i18n.translations:
        raise HTTPException(status_code=404, detail="Language not found")
    
    return {
        "success": True,
        "language": language,
        "translations": i18n.translations.get(language, {})
    }

@app.get("/api/language/supported")
async def get_supported_languages():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤"""
    return {
        "languages": list(i18n.translations.keys()),
        "default": "ru"
    }

@app.get("/api/language/detect")
async def detect_language(request: Request):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        init_data = request.headers.get("tma")
        if not init_data:
            return {"language": "ru", "detected": False}
        
        telegram_user = verify_telegram_auth(init_data)
        if not telegram_user:
            return {"language": "ru", "detected": False}
        
        language = get_user_language(telegram_user)
        return {
            "language": language,
            "detected": True,
            "telegram_language": telegram_user.get('language_code', ''),
            "user_id": telegram_user.get('id')
        }
    except Exception as e:
        return {"language": "ru", "detected": False, "error": str(e)}

@app.get("/api/stats/leaderboard")
async def get_leaderboard():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
    try:
        headers = get_supabase_headers()
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?is_active=eq.true&order=balance_ndn.desc&limit=10",
            headers=headers
        )
        
        if response.status_code == 200:
            users = response.json()
            leaders = []
            for i, user in enumerate(users, 1):
                leaders.append({
                    "rank": i,
                    "first_name": user.get('first_name'),
                    "username": user.get('username'),
                    "balance_ndn": float(user.get('balance_ndn', 0)),
                    "balance_stars": float(user.get('balance_stars', 0)),
                    "is_pro": user.get('is_pro', False)
                })
            
            return {
                "success": True,
                "leaders": leaders
            }
        else:
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–æ–≤"}
            
    except Exception as e:
        print(f"Error getting leaderboard: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/referrals/{telegram_id}")
async def get_user_referrals(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        headers = get_supabase_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{telegram_id}",
            headers=headers
        )
        
        if user_response.status_code != 200:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        users = user_response.json()
        if not users:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user = users[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        all_users_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?select=id,telegram_id,username,first_name,last_name,balance_ndn,created_at,is_pro,referral_path",
            headers=headers
        )
        
        if all_users_response.status_code != 200:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        all_users = all_users_response.json()
        all_referrals = []
        user_id = user['id']
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ referral_path
        for potential_ref in all_users:
            ref_id = potential_ref['id']
            if ref_id == user_id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                continue
                
            ref_path = potential_ref.get('referral_path', '')
            if ref_path and str(user_id) in ref_path:
                # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                path_parts = ref_path.split(',')
                try:
                    user_position = path_parts.index(str(user_id))
                    ref_position = path_parts.index(str(ref_id))
                    level = ref_position - user_position
                    
                    if level > 0:  # –†–µ—Ñ–µ—Ä–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å –≤ —Ü–µ–ø–æ—á–∫–µ
                        potential_ref['level'] = level
                        potential_ref['is_direct'] = (level == 1)
                        all_referrals.append(potential_ref)
                        print(f"üìä Found referral: {potential_ref.get('first_name', 'Unknown')} at level {level} (path: {ref_path}, user_pos: {user_position}, ref_pos: {ref_position})")
                except (ValueError, IndexError):
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_referrals = len(all_referrals)
        pro_referrals = len([r for r in all_referrals if r.get('is_pro', False)])
        regular_referrals = total_referrals - pro_referrals
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
        referrals_by_level = {}
        for ref in all_referrals:
            level = ref.get('level', 1)
            if level not in referrals_by_level:
                referrals_by_level[level] = []
            referrals_by_level[level].append(ref)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Ä–æ–≤–Ω—è–º
        referral_stats = []
        for level in range(1, 8):  # –£—Ä–æ–≤–Ω–∏ 1-7
            level_referrals = referrals_by_level.get(level, [])
            level_pro_referrals = [r for r in level_referrals if r.get('is_pro', False)]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è PRO —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            if level == 1:
                total_earnings = len(level_pro_referrals) * 200.0  # 200 NDN –∑–∞ —É—Ä–æ–≤–µ–Ω—å 1
            else:
                total_earnings = len(level_pro_referrals) * 150.0  # 150 NDN –∑–∞ —É—Ä–æ–≤–Ω–∏ 2-7
            
            referral_stats.append({
                "level": level,
                "total_referrals": len(level_referrals),
                "total_earnings": total_earnings
            })
        
        return {
            "success": True,
            "all_referrals": all_referrals,
            "referrals_by_level": referrals_by_level,
            "referral_stats": referral_stats,
            "total_referrals": total_referrals,
            "pro_referrals": pro_referrals,
            "regular_referrals": regular_referrals,
            "total_direct": len([r for r in all_referrals if r.get('is_direct', False)])
        }
            
    except Exception as e:
        print(f"Error getting referrals: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/referrals/process")
async def process_referral_registration(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ"""
    try:
        data = await request.json()
        telegram_user = data.get('telegram_user')
        referral_token = data.get('referral_token')
        
        if not telegram_user or not referral_token:
            return {"success": False, "message": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –∏–∑ —Ç–æ–∫–µ–Ω–∞
        if not referral_token.startswith('ref_'):
            return {"success": False, "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"}
        
        inviter_id = int(referral_token.replace('ref_', ''))
        
        headers = get_supabase_headers()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        inviter_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{inviter_id}",
            headers=headers
        )
        
        if inviter_response.status_code != 200:
            return {"success": False, "message": "–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        inviter_users = inviter_response.json()
        if not inviter_users:
            return {"success": False, "message": "–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        inviter = inviter_users[0]
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑—å—é
        user = get_or_create_user(telegram_user, referral_token)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
        update_referral_stats(inviter_id, user['id'])
        
        return {
            "success": True,
            "message": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —É—Å–ø–µ—à–Ω–∞",
            "inviter": {
                "id": inviter['id'],
                "first_name": inviter['first_name']
            },
            "user": user
        }
        
    except Exception as e:
        print(f"Error processing referral registration: {e}")
        return {"success": False, "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}

def update_referral_stats(inviter_id: int, new_user_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    try:
        headers = get_supabase_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{new_user_id}",
            headers=headers
        )
        
        if new_user_response.status_code != 200:
            return
        
        new_users = new_user_response.json()
        if not new_users:
            return
        
        new_user = new_users[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–¥–æ 7 —É—Ä–æ–≤–Ω–µ–π)
        current_inviter_id = inviter_id
        level = 1
        
        while current_inviter_id and level <= 7:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_response = requests.get(
                f"{SUPABASE_URL}/rest/v1/nodeon_referral_stats?user_id=eq.{current_inviter_id}&level=eq.{level}",
                headers=headers
            )
            
            if stats_response.status_code == 200:
                existing_stats = stats_response.json()
                
                if existing_stats:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    current_stats = existing_stats[0]
                    new_total_referrals = current_stats.get('total_referrals', 0) + 1
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —É—Ä–æ–≤–µ–Ω—å
                    reward_amount = get_referral_reward(level)
                    new_total_earnings = current_stats.get('total_earnings', 0) + reward_amount
                    
                    update_data = {
                        "total_referrals": new_total_referrals,
                        "total_earnings": new_total_earnings
                    }
                    
                    requests.patch(
                        f"{SUPABASE_URL}/rest/v1/nodeon_referral_stats?id=eq.{current_stats['id']}",
                        headers=headers,
                        json=update_data
                    )
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    reward_amount = get_referral_reward(level)
                    stats_data = {
                        "user_id": current_inviter_id,
                        "level": level,
                        "total_referrals": 1,
                        "total_earnings": reward_amount
                    }
                    
                    requests.post(
                        f"{SUPABASE_URL}/rest/v1/nodeon_referral_stats",
                        headers=headers,
                        json=stats_data
                    )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
            inviter_response = requests.get(
                f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{current_inviter_id}",
                headers=headers
            )
            
            if inviter_response.status_code == 200:
                inviter_users = inviter_response.json()
                if inviter_users:
                    current_inviter_id = inviter_users[0].get('inviter_id')
                else:
                    current_inviter_id = None
            else:
                current_inviter_id = None
            
            level += 1
        
        print(f"‚úÖ Referral stats updated for inviter {inviter_id}, new user {new_user_id}")
        
    except Exception as e:
        print(f"Error updating referral stats: {e}")

def get_referral_reward(level: int) -> float:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ PRO —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ"""
    rewards = {
        1: 200.0,  # 1-–π —É—Ä–æ–≤–µ–Ω—å: 200 NDN –∑–∞ PRO —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        2: 150.0,  # 2-–π —É—Ä–æ–≤–µ–Ω—å: 150 NDN –∑–∞ PRO —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        3: 150.0,  # 3-–π —É—Ä–æ–≤–µ–Ω—å: 150 NDN –∑–∞ PRO —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        4: 150.0,  # 4-–π —É—Ä–æ–≤–µ–Ω—å: 150 NDN –∑–∞ PRO —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        5: 150.0,  # 5-–π —É—Ä–æ–≤–µ–Ω—å: 150 NDN –∑–∞ PRO —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        6: 150.0,  # 6-–π —É—Ä–æ–≤–µ–Ω—å: 150 NDN –∑–∞ PRO —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        7: 150.0   # 7-–π —É—Ä–æ–≤–µ–Ω—å: 150 NDN –∑–∞ PRO —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    }
    return rewards.get(level, 0.0)

def update_user_referrals_data(user_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö"""
    try:
        headers = get_supabase_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?select=id,referral_path,is_pro",
            headers=headers
        )
        
        if all_users_response.status_code != 200:
            print(f"‚ùå Error getting all users: {all_users_response.status_code}")
            return
        
        all_users = all_users_response.json()
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        referrals_by_level = {}
        all_referrals = []
        total_referrals = 0
        pro_referrals = 0
        regular_referrals = 0
        
        for user in all_users:
            referral_path = user.get('referral_path', '')
            if not referral_path:
                continue
                
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å
            path_parts = [int(x) for x in referral_path.rstrip(',').split(',') if x.isdigit()]
            
            # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞—à–µ–≥–æ ID –≤ –ø—É—Ç–∏
            if user_id in path_parts:
                user_position = path_parts.index(user_id)
                ref_id = user['id']
                
                if ref_id in path_parts:
                    ref_position = path_parts.index(ref_id)
                    level = ref_position - user_position
                    
                    if level > 0:  # –†–µ—Ñ–µ—Ä–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å –≤ –ø—É—Ç–∏
                        if level not in referrals_by_level:
                            referrals_by_level[level] = []
                        
                        referrals_by_level[level].append(ref_id)
                        all_referrals.append(ref_id)
                        total_referrals += 1
                        
                        if user.get('is_pro', False):
                            pro_referrals += 1
                        else:
                            regular_referrals += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_data = {
            'all_referrals': all_referrals,
            'referrals_by_level': referrals_by_level,
            'total_referrals_count': total_referrals,
            'pro_referrals_count': pro_referrals,
            'regular_referrals_count': regular_referrals
        }
        
        update_response = requests.patch(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user_id}",
            headers=headers,
            json=update_data
        )
        
        if update_response.status_code == 200:
            print(f"‚úÖ Updated referral data for user {user_id}: {total_referrals} referrals")
        else:
            print(f"‚ùå Error updating referral data: {update_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Error updating user referrals data: {e}")

def get_pro_purchase_rewards() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ PRO —Å—Ç–∞—Ç—É—Å–∞ (1000 NDN)"""
    return {
        "developer_fee": 200.0,  # –ö–æ–º–∏—Å—Å–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        "level_1": 200.0,        # 1-–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        "level_2_7": 150.0,      # 2-7 —É—Ä–æ–≤–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        "total_referral_rewards": 200.0 + (150.0 * 6),  # 1100 NDN –≤—Å–µ–≥–æ
        "total_cost": 1000.0     # –°—Ç–æ–∏–º–æ—Å—Ç—å PRO —Å—Ç–∞—Ç—É—Å–∞
    }

def distribute_pro_purchase_rewards(user_id: int, amount: float = 1000.0):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ PRO —Å—Ç–∞—Ç—É—Å–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ"""
    try:
        print(f"üéâ Distributing PRO purchase rewards for user {user_id}")
        
        headers = get_supabase_headers()
        rewards = get_pro_purchase_rewards()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user_id}",
            headers=headers
        )
        
        if user_response.status_code != 200:
            print(f"‚ùå Failed to get user data: {user_response.status_code}")
            return
        
        users = user_response.json()
        if not users:
            print(f"‚ùå User {user_id} not found")
            return
        
        user = users[0]
        referral_path = user.get('referral_path', '')
        
        if not referral_path:
            print(f"‚ÑπÔ∏è User {user_id} has no referral path, only developer fee applies")
            # –¢–æ–ª—å–∫–æ –∫–æ–º–∏—Å—Å–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
            add_developer_fee(rewards["developer_fee"])
            return
        
        # –ü–∞—Ä—Å–∏–º –ø—É—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        inviter_ids = [int(id_str) for id_str in referral_path.split(',') if id_str.strip()]
        
        # –ò–°–ö–õ–Æ–ß–ê–ï–ú —Å–∞–º–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è PRO —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ —Ü–µ–ø–æ—á–∫–∏
        inviter_ids = [inviter_id for inviter_id in inviter_ids if inviter_id != user_id]
        
        print(f"üìä Referral chain (excluding buyer): {inviter_ids}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ —Ü–µ–ø–æ—á–∫–µ
        level = 1
        total_distributed = 0.0
        
        for inviter_id in inviter_ids:
            if level > 7:
                break
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
            inviter_response = requests.get(
                f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{inviter_id}",
                headers=headers
            )
            
            if inviter_response.status_code != 200:
                print(f"‚ö†Ô∏è Failed to get inviter {inviter_id} data")
                continue
            
            inviter_users = inviter_response.json()
            if not inviter_users:
                print(f"‚ö†Ô∏è Inviter {inviter_id} not found")
                continue
            
            inviter = inviter_users[0]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã
            if level == 1:
                reward_amount = rewards["level_1"]
            else:
                reward_amount = rewards["level_2_7"]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏—Ö, –Ω–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
            update_referral_stats_for_pro_purchase(inviter_id, level, reward_amount)
            
            # –ó–∞—á–∏—Å–ª—è–µ–º NDN –Ω–∞ –±–∞–ª–∞–Ω—Å –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
            new_balance = inviter.get('balance_ndn', 0) + reward_amount
            balance_response = requests.patch(
                f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{inviter_id}",
                headers=headers,
                json={"balance_ndn": new_balance}
            )
            
            if balance_response.status_code == 200:
                print(f"‚úÖ Level {level}: {inviter['first_name']} (ID: {inviter_id}) +{reward_amount} NDN")
                total_distributed += reward_amount
            else:
                print(f"‚ùå Failed to update balance for {inviter['first_name']}")
            
            level += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∏—Å—Å–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        add_developer_fee(rewards["developer_fee"])
        total_distributed += rewards["developer_fee"]
        
        # –ï—Å–ª–∏ —Ü–µ–ø–æ—á–∫–∞ –º–µ–Ω—å—à–µ 7 —É—Ä–æ–≤–Ω–µ–π, –æ—Å—Ç–∞—Ç–æ–∫ –∏–¥–µ—Ç –≤ –±–∞–Ω–∫
        remaining = amount - total_distributed
        if remaining > 0:
            add_to_server_wallet(remaining)
            print(f"üí∞ Remaining {remaining} NDN added to server wallet")
        
        print(f"üéØ Total distributed: {total_distributed} NDN")
        
    except Exception as e:
        print(f"‚ùå Error distributing PRO rewards: {e}")

def update_referral_stats_for_pro_purchase(inviter_id: int, level: int, reward_amount: float):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ PRO —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        headers = get_supabase_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_referral_stats?user_id=eq.{inviter_id}&level=eq.{level}",
            headers=headers
        )
        
        if stats_response.status_code == 200:
            existing_stats = stats_response.json()
            
            if existing_stats:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                current_stats = existing_stats[0]
                new_total_referrals = current_stats.get('total_referrals', 0) + 1
                new_total_earnings = current_stats.get('total_earnings', 0) + reward_amount
                
                update_data = {
                    "total_referrals": new_total_referrals,
                    "total_earnings": new_total_earnings
                }
                
                requests.patch(
                    f"{SUPABASE_URL}/rest/v1/nodeon_referral_stats?id=eq.{current_stats['id']}",
                    headers=headers,
                    json=update_data
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats_data = {
                    "user_id": inviter_id,
                    "level": level,
                    "total_referrals": 1,
                    "total_earnings": reward_amount
                }
                
                requests.post(
                    f"{SUPABASE_URL}/rest/v1/nodeon_referral_stats",
                    headers=headers,
                    json=stats_data
                )
        
    except Exception as e:
        print(f"‚ùå Error updating referral stats: {e}")

def add_developer_fee(amount: float):
    """–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    try:
        headers = get_supabase_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        dev_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{DEVELOPER_TELEGRAM_ID}",
            headers=headers
        )
        
        if dev_response.status_code == 200:
            dev_users = dev_response.json()
            if dev_users:
                dev_user = dev_users[0]
                new_balance = dev_user.get('balance_ndn', 0) + amount
                
                requests.patch(
                    f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{dev_user['id']}",
                    headers=headers,
                    json={"balance_ndn": new_balance}
                )
                
                print(f"üí∞ Developer fee: +{amount} NDN")
        
    except Exception as e:
        print(f"‚ùå Error adding developer fee: {e}")

def add_to_server_wallet(amount: float):
    """–î–æ–±–∞–≤–∏—Ç—å NDN –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫"""
    try:
        headers = get_supabase_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        wallet_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?order=id.desc&limit=1",
            headers=headers
        )
        
        if wallet_response.status_code == 200:
            wallets = wallet_response.json()
            if wallets:
                wallet = wallets[0]
                new_balance = wallet.get('balance_ndn', 0) + amount
                
                requests.patch(
                    f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?id=eq.{wallet['id']}",
                    headers=headers,
                    json={"balance_ndn": new_balance}
                )
                
                print(f"üè¶ Server wallet: +{amount} NDN")
        
    except Exception as e:
        print(f"‚ùå Error adding to server wallet: {e}")

@app.get("/api/game-rules")
async def get_game_rules(request: Request):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"""
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    language = request.headers.get('Accept-Language', 'ru')
    if ',' in language:
        language = language.split(',')[0]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫
    if language.startswith('en'):
        lang = 'en'
    elif language.startswith('es'):
        lang = 'es'
    elif language.startswith('de'):
        lang = 'de'
    elif language.startswith('fr'):
        lang = 'fr'
    else:
        lang = 'ru'
    
    # –ü—Ä–∞–≤–∏–ª–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    rules_data = {
        "ru": {
            "title": "üöÄ NodeOn Crypto - –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–∏–ª–ª–∏–æ–Ω—ã!",
            "sections": [
                {
                    "title": "üí∞ –ß—Ç–æ —Ç–∞–∫–æ–µ NDN?",
                    "content": "NDN - —ç—Ç–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —Ç—Ä–∞—Ç–∏—Ç—å –∏ –≤—ã–≤–æ–¥–∏—Ç—å! –ö–∞–∂–¥—ã–π NDN –∏–º–µ–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–º–µ–Ω—è–Ω –Ω–∞ Stars –∏–ª–∏ –≤—ã–≤–µ–¥–µ–Ω –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º."
                },
                {
                    "title": "‚≠ê –ö–∞–∫ –∫—É–ø–∏—Ç—å NDN?",
                    "content": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Stars –¥–ª—è –ø–æ–∫—É–ø–∫–∏ NDN –ø–æ –∫—É—Ä—Å—É 1:1. Stars - —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ Telegram, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å."
                },
                {
                    "title": "üíé Pro —Å—Ç–∞—Ç—É—Å - –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É!",
                    "content": "Pro —Å—Ç–∞—Ç—É—Å —Å—Ç–æ–∏—Ç –≤—Å–µ–≥–æ 1000 NDN, –Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ\n‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π\n‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
                },
                {
                    "title": "üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - —Ç–≤–æ–π –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥!",
                    "content": "–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å –∫–∞–∂–¥–æ–≥–æ –¥–æ 7 —É—Ä–æ–≤–Ω–µ–π –≤ –≥–ª—É–±–∏–Ω—É:\n‚Ä¢ 1-–π —É—Ä–æ–≤–µ–Ω—å: 200 NDN —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ Pro\n‚Ä¢ 2-7 —É—Ä–æ–≤–Ω–∏: –ø–æ 150 NDN —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏\n‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π - —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–æ—Ç–æ–∫!\n‚Ä¢ –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å!"
                },
                {
                    "title": "üè™ –ú–∞–≥–∞–∑–∏–Ω—ã - –ø—Ä–æ–¥–∞–≤–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π!",
                    "content": "–û—Ç–∫—Ä–æ–π —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω –∑–∞ 10,000 NDN –∏ –ø—Ä–æ–¥–∞–≤–∞–π:\n‚Ä¢ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ\n‚Ä¢ –§—É—Ç–±–æ–ª–∫–∏ –∏ –º–µ—Ä—á\n‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ —É—Å–ª—É–≥–∏\n‚Ä¢ –¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã\n‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\nüí∞ –ü–æ–ª—É—á–∞–π NDN —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏!"
                },
                {
                    "title": "üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ - —Å–æ—Ä–µ–≤–Ω—É–π—Å—è –∏ –ø–æ–±–µ–∂–¥–∞–π!",
                    "content": "–°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –∑–∞ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ:\n‚Ä¢ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É NDN\n‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –ª–∏–¥–µ—Ä–æ–≤\n‚Ä¢ –ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ\n‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã"
                },
                {
                    "title": "üéØ –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
                    "content": "1. –ö—É–ø–∏ NDN –∑–∞ Stars (–º–∏–Ω–∏–º—É–º 1000 –¥–ª—è Pro)\n2. –ê–∫—Ç–∏–≤–∏—Ä—É–π Pro —Å—Ç–∞—Ç—É—Å –∑–∞ 1000 NDN\n3. –ü–æ–ª—É—á–∏ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n4. –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å –∫–∞–∂–¥–æ–≥–æ!\n5. –û—Ç–∫—Ä–æ–π –º–∞–≥–∞–∑–∏–Ω –∑–∞ 10,000 NDN –∏ –ø—Ä–æ–¥–∞–≤–∞–π —Ç–æ–≤–∞—Ä—ã!\n6. –í—ã–≤–æ–¥–∏ NDN –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º\n\nüí° –°–û–í–ï–¢: –ß–µ–º —Ä–∞–Ω—å—à–µ –Ω–∞—á–Ω–µ—à—å - —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å!"
                },
                {
                    "title": "üí∏ –ü—Ä–∏–º–µ—Ä—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞",
                    "content": "–†–ï–§–ï–†–ê–õ–´:\n–ü—Ä–∏–≤–µ–¥–∏ 10 –¥—Ä—É–∑–µ–π ‚Üí –∫–∞–∂–¥—ã–π –ø–æ–∫—É–ø–∞–µ—Ç Pro ‚Üí —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 2000 NDN\n–ü—Ä–∏–≤–µ–¥–∏ 100 –¥—Ä—É–∑–µ–π ‚Üí –∫–∞–∂–¥—ã–π –ø–æ–∫—É–ø–∞–µ—Ç Pro ‚Üí —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 20000 NDN\n–ü—Ä–∏–≤–µ–¥–∏ 1000 –¥—Ä—É–∑–µ–π ‚Üí –∫–∞–∂–¥—ã–π –ø–æ–∫—É–ø–∞–µ—Ç Pro ‚Üí —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 200000 NDN\n\n–ú–ê–ì–ê–ó–ò–ù–´:\n–û—Ç–∫—Ä–æ–π –º–∞–≥–∞–∑–∏–Ω ‚Üí –ø—Ä–æ–¥–∞–≤–∞–π —Ç–æ–≤–∞—Ä—ã ‚Üí –ø–æ–ª—É—á–∞–π NDN —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏\n–ü—Ä–æ–¥–∞–π 100 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ 50 NDN ‚Üí –ø–æ–ª—É—á–∏ 5000 NDN\n\nüöÄ –ù–ï –û–ì–†–ê–ù–ò–ß–ï–ù–û! –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–∏–ª–ª–∏–æ–Ω—ã!"
                }
            ]
        },
        "en": {
            "title": "üöÄ NodeOn Crypto - Earn Millions!",
            "sections": [
                {
                    "title": "üí∞ What is NDN?",
                    "content": "NDN is the game's cryptocurrency that you can earn, spend and withdraw! Each NDN has real value and can be exchanged for Stars or transferred to other players."
                },
                {
                    "title": "‚≠ê How to buy NDN?",
                    "content": "Use Telegram Stars to buy NDN at 1:1 rate. Stars is Telegram's official currency that you can buy in the app or earn."
                },
                {
                    "title": "üíé Pro status - key to success!",
                    "content": "Pro status costs only 1000 NDN but opens huge opportunities:\n‚Ä¢ Access to referral system\n‚Ä¢ Ability to invite friends\n‚Ä¢ Earnings from each referral\n‚Ä¢ Priority support"
                },
                {
                    "title": "üë• Referral system - your passive income!",
                    "content": "Invite friends and earn from each up to 7 levels deep:\n‚Ä¢ Level 1: 200 NDN from each Pro purchase\n‚Ä¢ Levels 2-7: 150 NDN from each purchase\n‚Ä¢ More friends = more earnings!\n‚Ä¢ Passive income for life!"
                },
                {
                    "title": "üè™ Shops - sell and earn!",
                    "content": "Open your shop for 10,000 NDN and sell:\n‚Ä¢ Congratulations and videos\n‚Ä¢ T-shirts and merch\n‚Ä¢ Consultations and services\n‚Ä¢ Digital goods\n‚Ä¢ And much more!\n\nüí∞ Get NDN from every sale!"
                },
                {
                    "title": "üèÜ Leaderboard - compete and win!",
                    "content": "Compete with other players for top spots:\n‚Ä¢ Top 10 players by NDN balance\n‚Ä¢ Special rewards for leaders\n‚Ä¢ Community recognition\n‚Ä¢ Additional bonuses"
                },
                {
                    "title": "üéØ How to start earning right now!",
                    "content": "1. Buy NDN with Stars (minimum 1000 for Pro)\n2. Activate Pro status for 1000 NDN\n3. Get your referral link\n4. Invite friends and earn from each!\n5. Open shop for 10,000 NDN and sell goods!\n6. Transfer NDN to other players\n\nüí° TIP: The earlier you start - the more you earn!"
                },
                {
                    "title": "üí∏ Earning examples",
                    "content": "REFERRALS:\nBring 10 friends ‚Üí each buys Pro ‚Üí you get 2000 NDN\nBring 100 friends ‚Üí each buys Pro ‚Üí you get 20000 NDN\nBring 1000 friends ‚Üí each buys Pro ‚Üí you get 200000 NDN\n\nSHOPS:\nOpen shop ‚Üí sell goods ‚Üí get NDN from every sale\nSell 100 items at 50 NDN each ‚Üí get 5000 NDN\n\nüöÄ UNLIMITED! Earn millions!"
                }
            ]
        }
    }
    
    return {
        "success": True,
        "rules": rules_data.get(lang, rules_data["ru"])
    }

@app.post("/api/pro/buy")
async def buy_pro_status(request: Request):
    """–ö—É–ø–∏—Ç—å Pro —Å—Ç–∞—Ç—É—Å"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º init_data –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Telegram
        auth_header = request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="Telegram Mini App authorization required")
        
        init_data = auth_header.replace("tma ", "")
        if not init_data or init_data.strip() == "":
            raise HTTPException(status_code=401, detail="Telegram init_data required")
        
        telegram_user = verify_telegram_auth(init_data)
        user = get_or_create_user(telegram_user)
        user_language = get_user_language(telegram_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ Pro —Å—Ç–∞—Ç—É—Å
        if user.get('is_pro'):
            return {
                "success": False,
                "message": "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å Pro —Å—Ç–∞—Ç—É—Å!"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.get('balance_ndn', 0) < 1000:
            return {
                "success": False,
                "message": translate("pro.buy_error", user_language)
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        headers = get_supabase_headers()
        new_balance = user.get('balance_ndn', 0) - 1000
        
        response = requests.patch(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}",
            headers=headers,
            json={
                "is_pro": True,
                "balance_ndn": new_balance
            }
        )
        
        if response.status_code == 200:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Ü–µ–ø–æ—á–∫–µ
            print(f"üéâ User {user['first_name']} (ID: {user['id']}) bought PRO status!")
            distribute_pro_purchase_rewards(user['id'], 1000.0)
            
            return {
                "success": True,
                "message": translate("pro.buy_success", user_language),
                "new_balance": new_balance
            }
        else:
            return {
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ Pro —Å—Ç–∞—Ç—É—Å–∞"
            }
            
    except ValueError as e:
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        print(f"Error buying pro status: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# ==================== –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ====================

@app.get("/api/achievements/{telegram_id}")
async def get_user_achievements(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{telegram_id}",
            headers=get_supabase_headers()
        )
        
        if user_response.status_code != 200:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        users = user_response.json()
        if not users:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user = users[0]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞
        achievements = load_achievements()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        for achievement in achievements:
            achievement['progress'] = 0
            achievement['is_completed'] = False
            achievement['claimed_reward'] = False
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            if achievement['category'] == 'registration':
                achievement['is_completed'] = True
                achievement['progress'] = 1
            elif achievement['category'] == 'purchase' and user.get('balance_ndn', 0) > 0:
                achievement['is_completed'] = True
                achievement['progress'] = 1
            elif achievement['category'] == 'pro' and user.get('is_pro', False):
                achievement['is_completed'] = True
                achievement['progress'] = 1
        
        return {
            "success": True,
            "achievements": achievements
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error getting achievements: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/achievements/{user_id}/claim")
async def claim_achievement_reward(user_id: int, achievement_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{telegram_id}",
            headers=get_supabase_headers()
        )
        
        if user_response.status_code != 200:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        users = user_response.json()
        if not users:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user = users[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –Ω–∞–≥—Ä–∞–¥–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞
        achievement_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_user_achievements?user_id=eq.{user['id']}&achievement_id=eq.{achievement_id}",
            headers=get_supabase_headers()
        )
        
        if achievement_response.status_code != 200:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è")
        
        achievements = achievement_response.json()
        if not achievements:
            raise HTTPException(status_code=404, detail="–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        achievement = achievements[0]
        
        if not achievement['is_completed']:
            raise HTTPException(status_code=400, detail="–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        
        if achievement['claimed_reward']:
            raise HTTPException(status_code=400, detail="–ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≥—Ä–∞–¥–µ
        reward_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_achievements?id=eq.{achievement_id}",
            headers=get_supabase_headers()
        )
        
        if reward_response.status_code != 200:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã")
        
        rewards = reward_response.json()
        if not rewards:
            raise HTTPException(status_code=404, detail="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        reward = rewards[0]
        
        # –ó–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        new_balance_ndn = user['balance_ndn'] + reward['reward_ndn']
        new_balance_stars = user['balance_stars'] + reward['reward_stars']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_response = requests.patch(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}",
            headers=get_supabase_headers(),
            json={
                "balance_ndn": new_balance_ndn,
                "balance_stars": new_balance_stars
            }
        )
        
        if update_response.status_code != 200:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
        
        # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—É—é
        claim_response = requests.patch(
            f"{SUPABASE_URL}/rest/v1/nodeon_user_achievements?user_id=eq.{user['id']}&achievement_id=eq.{achievement_id}",
            headers=get_supabase_headers(),
            json={"claimed_reward": True}
        )
        
        if claim_response.status_code != 200:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–≥—Ä–∞–¥—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if reward['reward_ndn'] > 0:
            transaction_response = requests.post(
                f"{SUPABASE_URL}/rest/v1/nodeon_transactions",
                headers=get_supabase_headers(),
                json={
                    "user_id": user['id'],
                    "type": "achievement_reward",
                    "amount_ndn": reward['reward_ndn'],
                    "description": f"–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {reward['name']}"
                }
            )
        
        return {
            "success": True,
            "message": f"–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞: {reward['reward_ndn']} NDN, {reward['reward_stars']} Stars",
            "reward_ndn": reward['reward_ndn'],
            "reward_stars": reward['reward_stars']
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error claiming achievement reward: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# ==================== –ú–ê–ì–ê–ó–ò–ù–´ ====================

@app.post("/api/shops/open")
async def open_shop(request: Request):
    """–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω –∑–∞ 10,000 NDN"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_header = request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram")
        
        init_data = auth_header[4:]  # –£–±–∏—Ä–∞–µ–º "tma "
        telegram_user = verify_telegram_auth(init_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.json()
        shop_name = body.get("name", "")
        shop_description = body.get("description", "")
        shop_category = body.get("category", "general")
        
        if not shop_name:
            raise HTTPException(status_code=400, detail="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{telegram_user['id']}",
            headers=get_supabase_headers()
        )
        
        if user_response.status_code != 200:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        users = user_response.json()
        if not users:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user = users[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user['balance_ndn'] < 10000:
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NDN –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è 10,000 NDN)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –º–∞–≥–∞–∑–∏–Ω–∞
        existing_shops_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_shops?owner_id=eq.{user['id']}&is_active=eq.true",
            headers=get_supabase_headers()
        )
        
        if existing_shops_response.status_code == 200:
            existing_shops = existing_shops_response.json()
            if existing_shops:
                raise HTTPException(status_code=400, detail="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
        shop_data = {
            "owner_id": user['id'],
            "name": shop_name,
            "description": shop_description,
            "category": shop_category,
            "is_active": True
        }
        
        create_response = requests.post(
            f"{SUPABASE_URL}/rest/v1/nodeon_shops",
            headers=get_supabase_headers(),
            json=shop_data
        )
        
        if create_response.status_code != 201:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞")
        
        new_shop = create_response.json()[0]
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º NDN
        new_balance = user['balance_ndn'] - 10000
        update_response = requests.patch(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}",
            headers=get_supabase_headers(),
            json={"balance_ndn": new_balance}
        )
        
        if update_response.status_code != 200:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_response = requests.post(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions",
            headers=get_supabase_headers(),
            json={
                "user_id": user['id'],
                "type": "shop_opening",
                "amount_ndn": -10000,
                "description": f"–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {shop_name}"
            }
        )
        
        result = {
            "success": True,
            "message": "–ú–∞–≥–∞–∑–∏–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!",
            "shop_id": new_shop['id']
        }
        
        return {
            "success": True,
            "message": result['message'],
            "shop_id": result['shop_id']
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error opening shop: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/shops/{telegram_id}")
async def get_user_shops(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{telegram_id}",
            headers=get_supabase_headers()
        )
        
        if user_response.status_code != 200:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        users = user_response.json()
        if not users:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user = users[0]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
        all_shops = load_shops()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
        shops = [shop for shop in all_shops if shop['owner_id'] == user['id']]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        for shop in shops:
            shop['items_count'] = len(shop.get('items', []))
            shop['total_sales'] = 0  # –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂
        
        return {
            "success": True,
            "shops": shops
        }
        
    except Exception as e:
        print(f"Error getting user shops: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/shops/{shop_id}/items")
async def add_shop_item(shop_id: int, request: Request):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –º–∞–≥–∞–∑–∏–Ω"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_header = request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram")
        
        init_data = auth_header[4:]  # –£–±–∏—Ä–∞–µ–º "tma "
        telegram_user = verify_telegram_auth(init_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.json()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{telegram_user['id']}",
            headers=get_supabase_headers()
        )
        
        if user_response.status_code != 200:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        users = user_response.json()
        if not users:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        user = users[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        shop_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_shops?id=eq.{shop_id}",
            headers=get_supabase_headers()
        )
        
        if shop_response.status_code != 200:
            raise HTTPException(status_code=404, detail="–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        shops = shop_response.json()
        if not shops:
            raise HTTPException(status_code=404, detail="–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        shop = shops[0]
        
        if shop['owner_id'] != user['id']:
            raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ—Ç –º–∞–≥–∞–∑–∏–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
        item_data = {
            "shop_id": shop_id,
            "name": body.get("name", ""),
            "description": body.get("description", ""),
            "price_ndn": body.get("price_ndn", 0),
            "price_stars": body.get("price_stars", 0),
            "item_type": body.get("item_type", "digital"),
            "category": body.get("category", "general"),
            "image_url": body.get("image_url"),
            "stock_quantity": body.get("stock_quantity", -1),
            "is_available": True
        }
        
        add_response = requests.post(
            f"{SUPABASE_URL}/rest/v1/nodeon_shop_items",
            headers=get_supabase_headers(),
            json=item_data
        )
        
        if add_response.status_code != 201:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
        
        new_item = add_response.json()[0]
        
        result = {
            "success": True,
            "message": "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            "item_id": new_item['id']
        }
        
        return {
            "success": True,
            "message": result['message'],
            "item_id": result['item_id']
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error adding shop item: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/shops/items/{item_id}/buy")
async def buy_shop_item(item_id: int, request: Request):
    """–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_header = request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram")
        
        init_data = auth_header[4:]  # –£–±–∏—Ä–∞–µ–º "tma "
        telegram_user = verify_telegram_auth(init_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.json()
        quantity = body.get("quantity", 1)
        
        # –ü–æ–∫—É–ø–∞–µ–º —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏—é
        buy_response = requests.post(
            f"{SUPABASE_URL}/rest/v1/rpc/buy_shop_item",
            headers=get_supabase_headers(),
            json={
                "buyer_telegram_id": telegram_user['id'],
                "item_id": item_id,
                "quantity": quantity
            }
        )
        
        if buy_response.status_code != 200:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞")
        
        result = buy_response.json()
        if not result:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞")
        
        result = result[0]
        
        if not result['success']:
            raise HTTPException(status_code=400, detail=result['message'])
        
        return {
            "success": True,
            "message": result['message'],
            "order_id": result['order_id']
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error buying shop item: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# ==================== TELEGRAM STARS PAYMENTS ====================

@app.post("/api/payments/create-invoice")
async def create_invoice(request: InvoiceRequest, telegram_request: Request):
    """–°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ NDN –∑–∞ Telegram Stars"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º init_data –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
        auth_header = telegram_request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="Telegram Mini App authorization required")
        
        init_data = auth_header.replace("tma ", "")
        if not init_data or init_data.strip() == "":
            raise HTTPException(status_code=401, detail="Telegram init_data required")
        
        telegram_user = verify_telegram_auth(init_data)
        user = get_or_create_user(telegram_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if request.amount_ndn < 1:
            raise HTTPException(status_code=400, detail="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 NDN")
        
        if request.amount_ndn > 10000:
            raise HTTPException(status_code=400, detail="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10,000 NDN")
        
        # –ö—É—Ä—Å: 1 NDN = 1 Star
        amount_stars = request.amount_ndn
        
        # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
        payload = json.dumps({
            "user_id": user['id'],
            "telegram_id": telegram_user['id'],
            "amount_ndn": request.amount_ndn,
            "timestamp": int(time.time())
        })
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—á–µ—Ç –¥–ª—è Telegram Mini App
        print(f"üöÄ Creating invoice link for user {telegram_user['id']} ({telegram_user.get('first_name', 'Unknown')})")
        print(f"üí∞ Amount: {amount_stars} stars for {request.amount_ndn} NDN")
        
        result = create_invoice_link(
            amount_stars=amount_stars,
            description=f"–ü–æ–∫—É–ø–∫–∞ {request.amount_ndn} NDN –∑–∞ {amount_stars} Telegram Stars",
            payload=payload
        )
        
        print(f"üìä Invoice link result: {result}")
        
        if not result.get('ok'):
            error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            print(f"‚ùå Invoice link failed: {error_msg}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {error_msg}")
        
        return {
            "success": True,
            "message": "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
            "invoice_link": result['result'],
            "amount_stars": amount_stars,
            "amount_ndn": request.amount_ndn
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error creating invoice: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/payments/webhook")
async def payment_webhook(request: Request):
    """Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç Telegram Bot"""
    try:
        data = await request.json()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pre_checkout_query
        if 'pre_checkout_query' in data:
            query = data['pre_checkout_query']
            
            try:
                payload_data = json.loads(query['invoice_payload'])
                user_id = payload_data['user_id']
                amount_ndn = payload_data['amount_ndn']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                user_response = requests.get(
                    f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user_id}",
                    headers=get_supabase_headers()
                )
                
                if user_response.status_code != 200:
                    answer_pre_checkout_query(query['id'], False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return {"ok": True}
                
                users = user_response.json()
                if not users:
                    answer_pre_checkout_query(query['id'], False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return {"ok": True}
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
                answer_pre_checkout_query(query['id'], True)
                
            except Exception as e:
                print(f"Error processing pre_checkout_query: {e}")
                answer_pre_checkout_query(query['id'], False, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º successful_payment
        elif 'message' in data and 'successful_payment' in data['message']:
            payment = data['message']['successful_payment']
            user_id = data['message']['from']['id']
            
            try:
                payload_data = json.loads(payment['invoice_payload'])
                amount_ndn = payload_data['amount_ndn']
                telegram_id = payload_data['telegram_id']
                
                print(f"üí∞ Processing payment: {amount_ndn} NDN for user {telegram_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –∏–∑ payload
                user_response = requests.get(
                    f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{telegram_id}",
                    headers=get_supabase_headers()
                )
                
                if user_response.status_code == 200:
                    users = user_response.json()
                    if users:
                        user = users[0]
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
                        wallet_response = requests.get(
                            f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?id=eq.1",
                            headers=get_supabase_headers()
                        )
                        
                        if wallet_response.status_code == 200:
                            wallets = wallet_response.json()
                            if wallets:
                                wallet = wallets[0]
                                current_balance = wallet.get('balance_ndn', 0)
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ NDN –≤ –∫–æ—à–µ–ª—å–∫–µ
                                if current_balance < amount_ndn:
                                    print(f"‚ùå Insufficient NDN in server wallet: {current_balance} < {amount_ndn}")
                                    return {"ok": True}
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ (—Å–ø–∏—Å—ã–≤–∞–µ–º NDN, –¥–æ–±–∞–≤–ª—è–µ–º Stars)
                                new_wallet_balance = current_balance - amount_ndn
                                wallet_update = {
                                    "balance_ndn": new_wallet_balance,
                                    "total_ndn_issued": wallet.get('total_ndn_issued', 0) + amount_ndn,
                                    "total_stars_received": wallet.get('total_stars_received', 0) + amount_ndn
                                }
                                
                                wallet_update_response = requests.patch(
                                    f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?id=eq.1",
                                    headers=get_supabase_headers(),
                                    json=wallet_update
                                )
                                
                                if wallet_update_response.status_code == 200:
                                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—á–∏—Å–ª—è–µ–º NDN)
                                    new_user_balance = user.get('balance_ndn', 0) + amount_ndn
                                    user_update = {
                                        "balance_ndn": new_user_balance
                                    }
                                    
                                    user_update_response = requests.patch(
                                        f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}",
                                        headers=get_supabase_headers(),
                                        json=user_update
                                    )
                                    
                                    if user_update_response.status_code == 200:
                                        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                                        transaction_data = {
                                            "user_id": user['id'],
                                            "type": "buy_ndn",
                                            "amount_ndn": amount_ndn,
                                            "amount_stars": amount_ndn,
                                            "description": f"–ü–æ–∫—É–ø–∫–∞ {amount_ndn} NDN –∑–∞ {amount_ndn} Telegram Stars (ID: {payment['telegram_payment_charge_id']})"
                                        }
                                        
                                        transaction_response = requests.post(
                                            f"{SUPABASE_URL}/rest/v1/nodeon_transactions",
                                            headers=get_supabase_headers(),
                                            json=transaction_data
                                        )
                                        
                                        print(f"‚úÖ Payment processed: {amount_ndn} NDN transferred from server wallet to user {user['first_name']} (ID: {user['id']})")
                                        print(f"üí∞ New user balance: {new_user_balance} NDN")
                                        print(f"üè¶ New wallet balance: {new_wallet_balance} NDN")
                                    else:
                                        print(f"‚ùå Failed to update user balance: {user_update_response.status_code}")
                                else:
                                    print(f"‚ùå Failed to update wallet balance: {wallet_update_response.status_code}")
                            else:
                                print("‚ùå Server wallet not found")
                        else:
                            print(f"‚ùå Failed to get wallet: {wallet_response.status_code}")
                    else:
                        print(f"‚ùå User not found: {telegram_id}")
                else:
                    print(f"‚ùå Failed to get user: {user_response.status_code}")
                
            except Exception as e:
                print(f"‚ùå Error processing successful_payment: {e}")
        
        return {"ok": True}
        
    except Exception as e:
        print(f"Error processing webhook: {e}")
        return {"ok": False, "error": str(e)}

@app.get("/api/wallet/stats")
async def get_wallet_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?id=eq.1",
            headers=get_supabase_headers()
        )
        
        if response.status_code == 200:
            wallets = response.json()
            if wallets:
                wallet = wallets[0]
                return {
                    "wallet_balance": wallet.get('balance_ndn', 0),
                    "total_issued": wallet.get('total_ndn_issued', 0),
                    "total_received": wallet.get('total_ndn_received', 0),
                    "total_stars_received": wallet.get('total_stars_received', 0),
                    "total_stars_sent": wallet.get('total_stars_sent', 0),
                    "is_active": wallet.get('is_active', True),
                    "last_updated": wallet.get('updated_at')
                }
            else:
                raise HTTPException(status_code=404, detail="–ö–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—à–µ–ª—å–∫–∞")
            
    except Exception as e:
        print(f"Error getting wallet stats: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/bot/stars-balance")
async def get_bot_stars_balance_endpoint():
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å Stars –±–æ—Ç–∞"""
    try:
        balance = get_bot_stars_balance()
        
        if balance.get('ok'):
            return {
                "success": True,
                "star_count": balance.get('result', {}).get('star_count', 0),
                "available_for_exchange": balance.get('result', {}).get('star_count', 0)
            }
        else:
            return {
                "success": True,  # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ True, —Ç–∞–∫ –∫–∞–∫ Stars –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è
                "error": balance.get('description', 'API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'),
                "star_count": "N/A",  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                "available_for_exchange": "N/A",
                "message": "Stars –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            }
            
    except Exception as e:
        print(f"Error getting bot stars balance: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/payments/exchange-ndn")
async def exchange_ndn_for_stars(request: ExchangeNDNRequest, telegram_request: Request):
    """–û–±–º–µ–Ω—è—Ç—å NDN –Ω–∞ Telegram Stars"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º init_data –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
        auth_header = telegram_request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="Telegram Mini App authorization required")
        
        init_data = auth_header.replace("tma ", "")
        if not init_data or init_data.strip() == "":
            raise HTTPException(status_code=401, detail="Telegram init_data required")
        
        telegram_user = verify_telegram_auth(init_data)
        user = get_or_create_user(telegram_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if request.amount_ndn < 1:
            raise HTTPException(status_code=400, detail="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 NDN")
        
        if request.amount_ndn > 10000:
            raise HTTPException(status_code=400, detail="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10,000 NDN")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.get('balance_ndn', 0) < request.amount_ndn:
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NDN –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        
        # –ö—É—Ä—Å: 1 NDN = 1 Star
        amount_stars = request.amount_ndn
        
        print(f"üîÑ Exchange request: {request.amount_ndn} NDN for {amount_stars} Stars")
        print(f"üë§ User: {user['first_name']} (ID: {user['id']})")
        print(f"üí∞ Current balance: {user.get('balance_ndn', 0)} NDN")
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º NDN —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user_balance = user.get('balance_ndn', 0) - request.amount_ndn
        user_update = {
            "balance_ndn": new_user_balance
        }
        
        user_update_response = requests.patch(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}",
            headers=get_supabase_headers(),
            json=user_update
        )
        
        if user_update_response.status_code != 200:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ó–∞—á–∏—Å–ª—è–µ–º NDN –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        wallet_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?id=eq.1",
            headers=get_supabase_headers()
        )
        
        if wallet_response.status_code == 200:
            wallets = wallet_response.json()
            if wallets:
                wallet = wallets[0]
                new_wallet_balance = wallet.get('balance_ndn', 0) + request.amount_ndn
                
                wallet_update = {
                    "balance_ndn": new_wallet_balance,
                    "total_ndn_received": wallet.get('total_ndn_received', 0) + request.amount_ndn
                }
                
                wallet_update_response = requests.patch(
                    f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?id=eq.1",
                    headers=get_supabase_headers(),
                    json=wallet_update
                )
                
                if wallet_update_response.status_code != 200:
                    # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    rollback_user_balance = user.get('balance_ndn', 0)
                    requests.patch(
                        f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}",
                        headers=get_supabase_headers(),
                        json={"balance_ndn": rollback_user_balance}
                    )
                    raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å Stars –±–æ—Ç–∞
        bot_balance = get_bot_stars_balance()
        
        if not bot_balance.get('ok'):
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            rollback_user_balance = user.get('balance_ndn', 0)
            requests.patch(
                f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}",
                headers=get_supabase_headers(),
                json={"balance_ndn": rollback_user_balance}
            )
            
            rollback_wallet_balance = wallet.get('balance_ndn', 0)
            requests.patch(
                f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?id=eq.1",
                headers=get_supabase_headers(),
                json={"balance_ndn": rollback_wallet_balance}
            )
            
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å Stars –±–æ—Ç–∞")
        
        bot_stars_balance = bot_balance.get('result', {}).get('star_count', 0)
        
        if bot_stars_balance < amount_stars:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            rollback_user_balance = user.get('balance_ndn', 0)
            requests.patch(
                f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}",
                headers=get_supabase_headers(),
                json={"balance_ndn": rollback_user_balance}
            )
            
            rollback_wallet_balance = wallet.get('balance_ndn', 0)
            requests.patch(
                f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?id=eq.1",
                headers=get_supabase_headers(),
                json={"balance_ndn": rollback_wallet_balance}
            )
            
            raise HTTPException(
                status_code=400, 
                detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars —É –±–æ—Ç–∞ –¥–ª—è –æ–±–º–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ: {bot_stars_balance}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {amount_stars}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞."
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        stars_result = send_stars(telegram_user['id'], amount_stars)
        
        if not stars_result.get('ok'):
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            rollback_user_balance = user.get('balance_ndn', 0)
            requests.patch(
                f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}",
                headers=get_supabase_headers(),
                json={"balance_ndn": rollback_user_balance}
            )
            
            rollback_wallet_balance = wallet.get('balance_ndn', 0)
            requests.patch(
                f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?id=eq.1",
                headers=get_supabase_headers(),
                json={"balance_ndn": rollback_wallet_balance}
            )
            
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Stars: {stars_result.get('description', 'Unknown error')}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_data = {
            "user_id": user['id'],
            "type": "exchange_ndn",
            "amount_ndn": -request.amount_ndn,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
            "amount_stars": amount_stars,
            "description": f"–û–±–º–µ–Ω {request.amount_ndn} NDN –Ω–∞ {amount_stars} Telegram Stars"
        }
        
        transaction_response = requests.post(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions",
            headers=get_supabase_headers(),
            json=transaction_data
        )
        
        print(f"‚úÖ Exchange completed: {request.amount_ndn} NDN ‚Üí {amount_stars} Stars")
        print(f"üí∞ New user balance: {new_user_balance} NDN")
        print(f"üè¶ New wallet balance: {new_wallet_balance} NDN")
        
        return {
            "success": True,
            "message": f"–£—Å–ø–µ—à–Ω–æ –æ–±–º–µ–Ω—è–Ω–æ {request.amount_ndn} NDN –Ω–∞ {amount_stars} Telegram Stars",
            "amount_ndn": request.amount_ndn,
            "amount_stars": amount_stars,
            "new_balance": new_user_balance
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error exchanging NDN: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/payments/exchange-request")
async def create_exchange_request(request: ExchangeRequest, telegram_request: Request):
    """–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω NDN –Ω–∞ Stars (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º init_data –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization
        auth_header = telegram_request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="Telegram Mini App authorization required")
        
        init_data = auth_header.replace("tma ", "")
        if not init_data or init_data.strip() == "":
            raise HTTPException(status_code=401, detail="Telegram init_data required")
        
        telegram_user = verify_telegram_auth(init_data)
        user = get_or_create_user(telegram_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if request.amount_ndn < 1:
            raise HTTPException(status_code=400, detail="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1 NDN")
        
        if request.amount_ndn > 10000:
            raise HTTPException(status_code=400, detail="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10,000 NDN")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.get('balance_ndn', 0) < request.amount_ndn:
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ NDN –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º NDN —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user_balance = user.get('balance_ndn', 0) - request.amount_ndn
        user_update = {
            "balance_ndn": new_user_balance
        }
        
        user_update_response = requests.patch(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}",
            headers=get_supabase_headers(),
            json=user_update
        )
        
        if user_update_response.status_code != 200:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ó–∞—á–∏—Å–ª—è–µ–º NDN –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        wallet_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?id=eq.1",
            headers=get_supabase_headers()
        )
        
        if wallet_response.status_code == 200:
            wallets = wallet_response.json()
            if wallets:
                wallet = wallets[0]
                new_wallet_balance = wallet.get('balance_ndn', 0) + request.amount_ndn
                
                wallet_update = {
                    "balance_ndn": new_wallet_balance,
                    "total_ndn_received": wallet.get('total_ndn_received', 0) + request.amount_ndn
                }
                
                wallet_update_response = requests.patch(
                    f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?id=eq.1",
                    headers=get_supabase_headers(),
                    json=wallet_update
                )
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_data = {
            "user_id": user['id'],
            "type": "exchange_request",
            "amount_ndn": -request.amount_ndn,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
            "amount_stars": request.amount_ndn,
            "description": f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω {request.amount_ndn} NDN –Ω–∞ {request.amount_ndn} Stars (@{request.telegram_username})"
        }
        
        transaction_response = requests.post(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions",
            headers=get_supabase_headers(),
            json=transaction_data
        )
        
        print(f"üìù Exchange request created: {request.amount_ndn} NDN for @{request.telegram_username}")
        print(f"üí∞ New user balance: {new_user_balance} NDN")
        
        return {
            "success": True,
            "message": f"–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω {request.amount_ndn} NDN –Ω–∞ {request.amount_ndn} Stars —Å–æ–∑–¥–∞–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—ë –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
            "amount_ndn": request.amount_ndn,
            "amount_stars": request.amount_ndn,
            "new_balance": new_user_balance,
            "request_id": f"EXCH_{user['id']}_{int(time.time())}"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"Error creating exchange request: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====================

@app.get("/api/admin/check-status")
async def check_admin_status(request: Request):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        auth_header = request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="Telegram Mini App authorization required")
        
        init_data = auth_header.replace("tma ", "")
        telegram_user = verify_telegram_auth(init_data)
        user = get_or_create_user(telegram_user)
        
        user_status = user.get('user_status', 'user')
        is_admin = user_status in ['developer', 'operator', 'bankir']
        
        return {
            "success": True,
            "is_admin": is_admin,
            "user_status": user_status,
            "status_name": USER_STATUSES.get(user_status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "permissions": {
                "can_manage_exchanges": user_status in ['bankir', 'developer'],
                "can_manage_users": user_status in ['operator', 'developer'],
                "can_view_analytics": user_status in ['developer']
            }
        }
        
    except ValueError as e:
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        print(f"Error checking admin status: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/admin/dashboard")
async def get_admin_dashboard(request: Request):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        auth_header = request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="Telegram Mini App authorization required")
        
        init_data = auth_header.replace("tma ", "")
        telegram_user = verify_telegram_auth(init_data)
        user = get_or_create_user(telegram_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.get('user_status') not in ['bankir', 'developer']:
            raise HTTPException(status_code=403, detail="Access denied. Bankir or Developer status required")
        
        headers = get_supabase_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
        wallet_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_server_wallet?order=id.desc&limit=1",
            headers=headers
        )
        
        wallet_data = {}
        if wallet_response.status_code == 200:
            wallets = wallet_response.json()
            if wallets:
                wallet = wallets[0]
                wallet_data = {
                    "balance_ndn": float(wallet.get('balance_ndn', 0)),
                    "total_ndn_sold": float(wallet.get('total_ndn_sold', 0)),
                    "total_stars_received": float(wallet.get('total_stars_received', 0)),
                    "total_ndn_exchanged": float(wallet.get('total_ndn_exchanged', 0)),
                    "total_stars_sent": float(wallet.get('total_stars_sent', 0))
                }
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º nodeon_transactions)
        exchange_requests = []
        transactions_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions?type=eq.exchange_request&order=created_at.desc",
            headers=headers
        )
        
        if transactions_response.status_code == 200:
            transactions = transactions_response.json()
            for tx in transactions:
                if tx.get('type') == 'exchange_request':
                    exchange_requests.append({
                        "id": tx.get('id'),
                        "user_id": tx.get('user_id'),
                        "amount_ndn": float(tx.get('amount_ndn', 0)),
                        "description": tx.get('description', ''),
                        "created_at": tx.get('created_at'),
                        "status": "pending"
                    })
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users",
            headers=headers
        )
        
        stats = {
            "total_users": 0,
            "total_pro_users": 0,
            "total_ndn_in_circulation": 0.0,
            "total_referrals": 0
        }
        
        if users_response.status_code == 200:
            users = users_response.json()
            stats["total_users"] = len(users)
            stats["total_pro_users"] = len([u for u in users if u.get('is_pro', False)])
            stats["total_ndn_in_circulation"] = sum(float(u.get('balance_ndn', 0)) for u in users)
            stats["total_referrals"] = len([u for u in users if u.get('inviter_id') is not None])
        
        return {
            "success": True,
            "wallet": wallet_data,
            "exchange_requests": exchange_requests,
            "stats": stats
        }
            
    except ValueError as e:
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        print(f"Error getting admin dashboard: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/admin/exchange-requests")
async def get_exchange_requests(request: Request):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ–±–º–µ–Ω –¥–ª—è –±–∞–Ω–∫–∏—Ä–∞"""
    try:
        auth_header = request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="Telegram Mini App authorization required")
        
        init_data = auth_header.replace("tma ", "")
        telegram_user = verify_telegram_auth(init_data)
        user = get_or_create_user(telegram_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.get('user_status') not in ['bankir', 'developer']:
            raise HTTPException(status_code=403, detail="Access denied. Bankir or Developer status required")
        
        headers = get_supabase_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±–º–µ–Ω –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions?type=eq.exchange_request&order=created_at.desc",
            headers=headers
        )
        
        if response.status_code == 200:
            transactions = response.json()
            requests_data = []
            for tx in transactions:
                if tx.get('type') == 'exchange_request':
                    requests_data.append({
                        "id": tx.get('id'),
                        "user_id": tx.get('user_id'),
                        "amount_ndn": float(tx.get('amount_ndn', 0)),
                        "amount_stars": int(float(tx.get('amount_ndn', 0))),  # 1:1 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
                        "telegram_username": "Unknown",  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ user_id
                        "status": "pending",
                        "description": tx.get('description', ''),
                        "created_at": tx.get('created_at')
                    })
            
            return {
                "success": True,
                "requests": requests_data
            }
        else:
            return {"success": False, "message": "Failed to fetch exchange requests"}
            
    except ValueError as e:
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        print(f"Error getting exchange requests: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/admin/exchange-requests/{request_id}/approve")
async def approve_exchange_request(request_id: int, request: Request):
    """–û–¥–æ–±—Ä–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω"""
    try:
        auth_header = request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="Telegram Mini App authorization required")
        
        init_data = auth_header.replace("tma ", "")
        telegram_user = verify_telegram_auth(init_data)
        user = get_or_create_user(telegram_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.get('user_status') not in ['bankir', 'developer']:
            raise HTTPException(status_code=403, detail="Access denied. Bankir or Developer status required")
        
        headers = get_supabase_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        get_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions?id=eq.{request_id}",
            headers=headers
        )
        
        if get_response.status_code != 200:
            return {"success": False, "message": "Exchange request not found"}
        
        requests_data = get_response.json()
        if not requests_data:
            return {"success": False, "message": "Exchange request not found"}
        
        exchange_request = requests_data[0]
        user_id = exchange_request.get('user_id')
        amount_ndn = abs(float(exchange_request.get('amount_ndn', 0)))
        amount_stars = int(amount_ndn)  # 1:1 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user_id}",
            headers=headers
        )
        
        if user_response.status_code != 200:
            return {"success": False, "message": "User not found"}
        
        user_data = user_response.json()
        if not user_data:
            return {"success": False, "message": "User not found"}
        
        user_info = user_data[0]
        telegram_id = user_info.get('telegram_id')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        update_response = requests.patch(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions?id=eq.{request_id}",
            headers=headers,
            json={
                "description": f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {amount_ndn} NDN ‚Üí {amount_stars} Stars (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {user.get('first_name', 'Admin')})"
            }
        )
        
        if update_response.status_code in [200, 204]:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API
            print(f"‚úÖ Exchange approved: User {user_id} ({telegram_id}) - {amount_ndn} NDN ‚Üí {amount_stars} Stars")
            
            return {
                "success": True,
                "message": f"–ó–∞—è–≤–∫–∞ {request_id} –æ–¥–æ–±—Ä–µ–Ω–∞. {amount_stars} Stars –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
                "request_id": request_id,
                "amount_ndn": amount_ndn,
                "amount_stars": amount_stars,
                "user_telegram_id": telegram_id
            }
        else:
            return {"success": False, "message": "Failed to update request status"}
            
    except ValueError as e:
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        print(f"Error approving exchange request: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/admin/exchange-requests/{request_id}/reject")
async def reject_exchange_request(request_id: int, request: Request):
    """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –æ–±–º–µ–Ω"""
    try:
        auth_header = request.headers.get("Authorization", "")
        if not auth_header.startswith("tma "):
            raise HTTPException(status_code=401, detail="Telegram Mini App authorization required")
        
        init_data = auth_header.replace("tma ", "")
        telegram_user = verify_telegram_auth(init_data)
        user = get_or_create_user(telegram_user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if user.get('user_status') not in ['bankir', 'developer']:
            raise HTTPException(status_code=403, detail="Access denied. Bankir or Developer status required")
        
        headers = get_supabase_headers()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        get_response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions?id=eq.{request_id}",
            headers=headers
        )
        
        if get_response.status_code != 200:
            return {"success": False, "message": "Exchange request not found"}
        
        requests_data = get_response.json()
        if not requests_data:
            return {"success": False, "message": "Exchange request not found"}
        
        exchange_request = requests_data[0]
        amount_ndn = abs(float(exchange_request.get('amount_ndn', 0)))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        update_response = requests.patch(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions?id=eq.{request_id}",
            headers=headers,
            json={
                "description": f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {amount_ndn} NDN ‚Üí Stars (–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ {user.get('first_name', 'Admin')})"
            }
        )
        
        if update_response.status_code in [200, 204]:
            print(f"‚ùå Exchange rejected: Request {request_id} rejected by {user.get('first_name', 'Admin')}")
            
            return {
                "success": True,
                "message": f"–ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                "request_id": request_id,
                "amount_ndn": amount_ndn
            }
        else:
            return {"success": False, "message": "Failed to update request status"}
            
    except ValueError as e:
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        print(f"Error rejecting exchange request: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# –ò–≥—Ä–æ–≤—ã–µ API endpoints
@app.get("/api/game/data/{user_id}")
async def get_game_data(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return {
            "success": True,
            "data": {
                "level": 1,
                "xp": 0,
                "achievements": [],
                "daily_rewards": [],
                "stats": {
                    "days_played": 0,
                    "total_earned": 0,
                    "total_referrals": 0
                }
            }
        }
    except Exception as e:
        print(f"Error getting game data: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/game/claim-daily-reward")
async def claim_daily_reward(request: Request):
    """–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        day = data.get("day")
        
        if not user_id or not day:
            raise HTTPException(status_code=400, detail="Missing user_id or day")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥—ã
        rewards = {
            1: 10, 2: 20, 3: 30, 4: 50, 5: 75, 6: 100, 7: 200
        }
        
        reward_amount = rewards.get(day, 0)
        
        return {
            "success": True,
            "message": f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞: {reward_amount} NDN",
            "reward_amount": reward_amount,
            "day": day
        }
    except Exception as e:
        print(f"Error claiming daily reward: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/game/update-achievement")
async def update_achievement(request: Request):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        achievement_id = data.get("achievement_id")
        progress = data.get("progress", 1)
        
        if not user_id or not achievement_id:
            raise HTTPException(status_code=400, detail="Missing user_id or achievement_id")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        return {
            "success": True,
            "message": "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
            "achievement_id": achievement_id,
            "progress": progress
        }
    except Exception as e:
        print(f"Error updating achievement: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/game/achievements/{user_id}")
async def get_achievements(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        achievements = [
            {
                "id": "first_login",
                "title": "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
                "description": "–í–æ–π—Ç–∏ –≤ –∏–≥—Ä—É –≤–ø–µ—Ä–≤—ã–µ",
                "icon": "üéÆ",
                "progress": 1,
                "max_progress": 1,
                "reward": 50,
                "completed": True
            },
            {
                "id": "pro_user",
                "title": "Pro –∏–≥—Ä–æ–∫",
                "description": "–ö—É–ø–∏—Ç—å Pro —Å—Ç–∞—Ç—É—Å",
                "icon": "üíé",
                "progress": 0,
                "max_progress": 1,
                "reward": 100,
                "completed": False
            },
            {
                "id": "referral_master",
                "title": "–ú–∞—Å—Ç–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤",
                "description": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å 5 –¥—Ä—É–∑–µ–π",
                "icon": "üë•",
                "progress": 0,
                "max_progress": 5,
                "reward": 200,
                "completed": False
            },
            {
                "id": "daily_player",
                "title": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∏–≥—Ä–æ–∫",
                "description": "–ó–∞—Ö–æ–¥–∏—Ç—å –≤ –∏–≥—Ä—É 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥",
                "icon": "üìÖ",
                "progress": 0,
                "max_progress": 7,
                "reward": 300,
                "completed": False
            }
        ]
        
        return {
            "success": True,
            "achievements": achievements
        }
    except Exception as e:
        print(f"Error getting achievements: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# NDN Miner API endpoints
@app.get("/api/miner/data/{user_id}")
async def get_miner_data(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—á–µ—Ç–æ–º –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user = await get_user_by_telegram_id(user_id)
        if not user:
            return {"success": False, "error": "User not found"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã nodeon_miner_data
        miner_data = await get_miner_data_from_db(user_id)
        
        if not miner_data:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥–∞
            miner_data = await create_initial_miner_data(user_id)
            print(f"üìä –°–æ–∑–¥–∞–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —á–∏—Ç–µ—Ä—Å—Ç–≤–∞
        current_time = int(time.time() * 1000)
        last_update = miner_data.get("last_update", current_time)
        time_diff = current_time - last_update
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∏—Ç–µ—Ä—Å—Ç–≤–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
        max_reasonable_time = 7 * 24 * 60 * 60 * 1000  # 7 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        if time_diff > max_reasonable_time:
            print(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {time_diff/1000/60/60:.1f} —á–∞—Å–æ–≤")
            time_diff = max_reasonable_time
            last_update = current_time - time_diff
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
        if time_diff > 1000:
            offline_earnings = calculate_offline_earnings(miner_data, time_diff)
            if offline_earnings > 0:
                # –û–±–Ω–æ–≤–ª—è–µ–º Gas –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                miner_data["ndnGas"] = miner_data.get("ndnGas", 100) + offline_earnings
                miner_data["totalGasEarned"] = miner_data.get("totalGasEarned", 100) + offline_earnings
                print(f"üí∞ –û—Ñ—Ñ–ª–∞–π–Ω –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {offline_earnings} Gas –∑–∞ {time_diff/1000:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        miner_data["last_update"] = current_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        await update_user_miner_data(user_id, miner_data)
        
        return {"success": True, "miner_data": miner_data}
    except Exception as e:
        print(f"Error getting miner data: {e}")
        return {"success": False, "error": "Failed to get miner data"}

def calculate_offline_earnings(miner_data: dict, time_diff_ms: int) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –≤—Ä–µ–º—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–≥—Ä–æ–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–µ—Ä–º—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–∞
        farms = miner_data.get("farms", [])
        if not farms or len(farms) == 0:
            return 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –º–∏–Ω—É—Ç—É
        total_gas_per_minute = 0
        total_energy_cost = 0
        
        for farm in farms:
            farm_type = farm.get("type")
            if farm_type == "cpu_miner":
                base_gas = 1
                energy_cost = 1
            elif farm_type == "gpu_farm":
                base_gas = 5
                energy_cost = 3
            elif farm_type == "asic_rig":
                base_gas = 20
                energy_cost = 8
            elif farm_type == "data_center":
                base_gas = 100
                energy_cost = 25
            else:
                continue
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            upgrades = miner_data.get("upgrades", {})
            speed_multiplier = 1 + (upgrades.get("speed", 0) * 0.1)
            efficiency_multiplier = 1 - (upgrades.get("efficiency", 0) * 0.2)
            
            total_gas_per_minute += base_gas * speed_multiplier
            total_energy_cost += energy_cost * efficiency_multiplier
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é
        current_energy = miner_data.get("energy", 100)
        if total_energy_cost > current_energy:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ - –º–∞–π–Ω–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞: {total_energy_cost} > {current_energy}")
            return 0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        time_diff_minutes = time_diff_ms / (1000 * 60)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
        earnings = total_gas_per_minute * time_diff_minutes
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é (–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∑–∞ –≤—Ä–µ–º—è)
        energy_consumption = total_energy_cost * time_diff_minutes
        miner_data["energy"] = max(0, current_energy - energy_consumption)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º Gas
        miner_data["ndnGas"] = miner_data.get("ndnGas", 100) + earnings
        miner_data["totalGasEarned"] = miner_data.get("totalGasEarned", 100) + earnings
        
        print(f"üí∞ –û—Ñ—Ñ–ª–∞–π–Ω —Ä–∞—Å—á–µ—Ç: {total_gas_per_minute} Gas/–º–∏–Ω –∑–∞ {time_diff_minutes:.2f} –º–∏–Ω = {earnings:.2f} Gas")
        return round(earnings, 2)
    except Exception as e:
        print(f"Error calculating offline earnings: {e}")
        return 0

@app.post("/api/miner/buy-farm")
async def buy_farm(request: Request):
    """–ö—É–ø–∏—Ç—å —Ñ–µ—Ä–º—É –º–∞–π–Ω–∏–Ω–≥–∞"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        farm_type = data.get("farm_type")
        
        print(f"üõí –ü–æ–∫—É–ø–∫–∞ —Ñ–µ—Ä–º—ã: user_id={user_id}, farm_type={farm_type}")
        
        if not user_id or not farm_type:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return {"success": False, "error": "Missing parameters"}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(user_id)
        if not user:
            print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {user_id}")
            return {"success": False, "error": "User not found"}
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {user['id']}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–µ—Ä–º—ã
        farm_costs = {
            "cpu_miner": 50,
            "gpu_farm": 250,
            "asic_rig": 1000,
            "data_center": 5000
        }
        
        cost = farm_costs.get(farm_type)
        if not cost:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–µ—Ä–º—ã: {farm_type}")
            return {"success": False, "error": "Invalid farm type"}
        
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–µ—Ä–º—ã: {cost} Gas")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞
        miner_data = await get_miner_data_from_db(user_id)
        if not miner_data:
            print("üìä –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞")
            miner_data = await create_initial_miner_data(user_id)
            if not miner_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞")
                return {"success": False, "error": "Failed to create miner data"}
        else:
            print(f"üìä –î–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: Gas={miner_data.get('ndnGas', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å Gas
        current_gas = miner_data.get("ndnGas", 0)
        if current_gas < cost:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Gas: {current_gas} < {cost}")
            return {"success": False, "error": "Not enough Gas"}
        
        # –ü–æ–∫—É–ø–∞–µ–º —Ñ–µ—Ä–º—É
        miner_data["ndnGas"] = current_gas - cost
        if "farms" not in miner_data:
            miner_data["farms"] = []
        
        miner_data["farms"].append({
            "type": farm_type,
            "level": 1,
            "purchased_at": int(time.time() * 1000)
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        miner_data["last_update"] = int(time.time() * 1000)
        
        print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: Gas={miner_data['ndnGas']}, –§–µ—Ä–º={len(miner_data['farms'])}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_result = await update_user_miner_data(user_id, miner_data)
        if not save_result:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return {"success": False, "error": "Failed to save miner data"}
        
        print(f"‚úÖ –§–µ—Ä–º–∞ {farm_type} —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        print(f"üìä –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞: Gas={miner_data['ndnGas']}, –§–µ—Ä–º={len(miner_data['farms'])}")
        
        return {"success": True, "message": "Farm purchased successfully", "miner_data": miner_data}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ñ–µ—Ä–º—ã: {e}")
        import traceback
        traceback.print_exc()
        return {"success": False, "error": "Failed to buy farm"}

@app.get("/api/miner/check-tables")
async def check_miner_tables():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –º–∞–π–Ω–µ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É nodeon_miner_data
        url = f"{SUPABASE_URL}/rest/v1/nodeon_miner_data?select=count"
        headers = {
            "apikey": SUPABASE_ANON_KEY,
            "Authorization": f"Bearer {SUPABASE_ANON_KEY}"
        }
        
        response = requests.get(url, headers=headers)
        miner_data_exists = response.status_code == 200
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É nodeon_miner_stats
        url = f"{SUPABASE_URL}/rest/v1/nodeon_miner_stats?select=count"
        response = requests.get(url, headers=headers)
        miner_stats_exists = response.status_code == 200
        
        return {
            "success": True,
            "tables": {
                "nodeon_miner_data": miner_data_exists,
                "nodeon_miner_stats": miner_stats_exists
            }
        }
    except Exception as e:
        print(f"Error checking tables: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/miner/save-gas")
async def save_miner_gas(request: Request):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å Gas –º–∞–π–Ω–µ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        gas_amount = data.get("gas_amount")
        total_gas_earned = data.get("total_gas_earned")
        last_update = data.get("last_update")
        
        if not user_id or gas_amount is None:
            return {"success": False, "error": "Missing parameters"}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(user_id)
        if not user:
            return {"success": False, "error": "User not found"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞
        miner_data = await get_miner_data_from_db(user_id)
        if not miner_data:
            return {"success": False, "error": "Miner data not found"}
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Gas –Ω–µ —É–≤–µ–ª–∏—á–∏–ª—Å—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ
        current_gas = miner_data.get("ndnGas", 100)
        if gas_amount > current_gas + 10000:  # –ú–∞–∫—Å–∏–º—É–º +10000 Gas –∑–∞ —Ä–∞–∑
            print(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ Gas –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {current_gas} -> {gas_amount}")
            return {"success": False, "error": "Suspicious gas increase detected"}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        miner_data["ndnGas"] = gas_amount
        miner_data["totalGasEarned"] = total_gas_earned or gas_amount
        miner_data["last_update"] = last_update or int(time.time() * 1000)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        success = await update_user_miner_data(user_id, miner_data)
        if not success:
            return {"success": False, "error": "Failed to save data"}
        
        print(f"‚úÖ Gas —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {gas_amount}")
        return {"success": True, "message": "Gas saved successfully"}
        
    except Exception as e:
        print(f"Error saving miner gas: {e}")
        return {"success": False, "error": "Failed to save gas"}

@app.post("/api/miner/buy-premium-farm")
async def buy_premium_farm(request: Request):
    """–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º —Ñ–µ—Ä–º—É –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–µ NDN"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        farm_type = data.get("farm_type")
        
        if not user_id or not farm_type:
            return {"success": False, "error": "Missing parameters"}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(user_id)
        if not user:
            return {"success": False, "error": "User not found"}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ NDN
        premium_farm_costs = {
            "golden_farm": 500,  # 500 NDN
            "diamond_farm": 2000,  # 2000 NDN
            "quantum_farm": 10000  # 10000 NDN
        }
        
        cost_ndn = premium_farm_costs.get(farm_type)
        if not cost_ndn:
            return {"success": False, "error": "Invalid premium farm type"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å NDN
        print(f"Checking balance for user {user_id}: {user.balance_ndn} NDN, cost: {cost_ndn} NDN")
        if user.balance_ndn < cost_ndn:
            return {"success": False, "error": "Not enough NDN"}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞
        miner_data = await get_miner_data_from_db(user_id)
        if not miner_data:
            print(f"Creating initial miner data for user {user_id}")
            miner_data = await create_initial_miner_data(user_id)
            if not miner_data:
                return {"success": False, "error": "Failed to create miner data"}
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º NDN –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–µ—Ä–º—É
        old_balance = user.balance_ndn
        user.balance_ndn -= cost_ndn
        print(f"Updating balance: {old_balance} -> {user.balance_ndn}")
        
        if "farms" not in miner_data:
            miner_data["farms"] = []
        
        new_farm = {
            "type": farm_type,
            "level": 1,
            "premium": True,
            "purchased_at": int(time.time() * 1000)
        }
        miner_data["farms"].append(new_farm)
        print(f"Added farm: {new_farm}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        miner_data["last_update"] = int(time.time() * 1000)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        print(f"Saving miner data and balance for user {user_id}")
        miner_saved = await update_user_miner_data(user_id, miner_data)
        balance_saved = await update_user_balance(user_id, user.balance_ndn)
        
        print(f"Save results - Miner: {miner_saved}, Balance: {balance_saved}")
        
        return {"success": True, "message": "Premium farm purchased successfully"}
    except Exception as e:
        print(f"Error buying premium farm: {e}")
        return {"success": False, "error": "Failed to buy premium farm"}

@app.post("/api/miner/save-state")
async def save_miner_state(request: Request):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞–π–Ω–µ—Ä–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        miner_data = data.get("miner_data")
        
        if not user_id or not miner_data:
            return {"success": False, "error": "Missing parameters"}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        miner_data["last_update"] = int(time.time() * 1000)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await update_user_miner_data(user_id, miner_data)
        
        return {"success": True, "message": "Miner state saved successfully"}
    except Exception as e:
        print(f"Error saving miner state: {e}")
        return {"success": False, "error": "Failed to save miner state"}

async def get_miner_data_from_db(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞ –∏–∑ –ë–î"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ ID –≤ –ë–î
        user = await get_user_by_telegram_id(user_id)
        if not user:
            print(f"User with telegram_id {user_id} not found")
            return None
        
        url = f"{SUPABASE_URL}/rest/v1/nodeon_miner_data?user_id=eq.{user['id']}&select=*"
        headers = {
            "apikey": SUPABASE_ANON_KEY,
            "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
            "Content-Type": "application/json"
        }
        
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            if data and len(data) > 0:
                miner_record = data[0]
                # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞
                if miner_record.get("miner_data"):
                    import json
                    return json.loads(miner_record["miner_data"])
        return None
    except Exception as e:
        print(f"Error getting miner data from DB: {e}")
        return None

async def create_initial_miner_data(user_id: int) -> dict:
    """–°–æ–∑–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(user_id)
        if not user:
            return None
        
        current_time = int(time.time() * 1000)
        
        miner_data = {
            "ndnGas": 100.0,
            "energy": 100,
            "maxEnergy": 100,
            "gasPerMinute": 0.0,
            "farms": [],
            "upgrades": {
                "speed": 0,
                "efficiency": 0,
                "automation": 0
            },
            "totalGasEarned": 100.0,
            "lastEnergyRefill": current_time,
            "lastUpdate": current_time
        }
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        import json
        url = f"{SUPABASE_URL}/rest/v1/nodeon_miner_data"
        headers = {
            "apikey": SUPABASE_ANON_KEY,
            "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
            "Content-Type": "application/json"
        }
        
        db_data = {
            "user_id": user["id"],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            "miner_data": json.dumps(miner_data),
            "last_update": current_time
        }
        
        response = requests.post(url, headers=headers, json=db_data)
        
        if response.status_code == 201:
            print(f"Created initial miner data for user {user_id}")
            return miner_data
        else:
            print(f"Error creating miner data: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"Error creating initial miner data: {e}")
        return None

async def update_user_miner_data(user_id: int, miner_data: dict):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        import json
        current_time = int(time.time() * 1000)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ ID –≤ –ë–î
        user = await get_user_by_telegram_id(user_id)
        if not user:
            print(f"User with telegram_id {user_id} not found")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        url = f"{SUPABASE_URL}/rest/v1/nodeon_miner_data?user_id=eq.{user['id']}"
        headers = {
            "apikey": SUPABASE_ANON_KEY,
            "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
            "Content-Type": "application/json",
            "Prefer": "return=minimal"
        }
        
        update_data = {
            "miner_data": json.dumps(miner_data),
            "last_update": current_time
        }
        
        response = requests.patch(url, headers=headers, json=update_data)
        
        print(f"üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–∞: {response.status_code}")
        if response.status_code not in [200, 204]:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–∞: {response.status_code} - {response.text}")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await update_miner_stats(user_id)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
            
    except Exception as e:
        print(f"Error updating miner data: {e}")
        return False

async def update_miner_stats(user_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–π–Ω–µ—Ä–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–π–Ω–µ—Ä–∞
        miner_data = await get_miner_data_from_db(user_id)
        if not miner_data:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_by_telegram_id(user_id)
        if not user:
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
        total_gas = miner_data.get("total_gas_earned", 0)
        level = max(1, int(total_gas / 1000) + 1)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–µ—Ä–º—ã –∏ —É–ª—É—á—à–µ–Ω–∏—è
        farms_count = len(miner_data.get("farms", []))
        upgrades_count = sum(miner_data.get("upgrades", {}).values())
        
        stats_data = {
            "user_id": user["id"],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            "level": level,
            "total_gas_earned": total_gas,
            "total_farms": farms_count,
            "total_upgrades": upgrades_count,
            "last_update": int(time.time() * 1000)
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        url = f"{SUPABASE_URL}/rest/v1/nodeon_miner_stats"
        headers = {
            "apikey": SUPABASE_ANON_KEY,
            "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
            "Content-Type": "application/json",
            "Prefer": "resolution=merge-duplicates"
        }
        
        response = requests.post(url, headers=headers, json=stats_data)
        
        if response.status_code in [200, 201]:
            print(f"Updated miner stats for user {user_id}")
        else:
            print(f"Error updating miner stats: {response.status_code}")
            
    except Exception as e:
        print(f"Error updating miner stats: {e}")

@app.get("/api/miner/leaderboard")
async def get_miner_leaderboard():
    """–ü–æ–ª—É—á–∏—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –º–∞–π–Ω–µ—Ä–æ–≤"""
    try:
        url = f"{SUPABASE_URL}/rest/v1/nodeon_miner_stats?select=*&order=total_gas_earned.desc,miner_level.desc&limit=50"
        headers = {
            "apikey": SUPABASE_KEY,
            "Authorization": f"Bearer {SUPABASE_KEY}",
            "Content-Type": "application/json"
        }
        
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            leaderboard = response.json()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
            for i, player in enumerate(leaderboard, 1):
                player["rank"] = i
            
            return {"success": True, "leaderboard": leaderboard}
        else:
            print(f"Error getting leaderboard: {response.status_code}")
            return {"success": False, "error": "Failed to get leaderboard"}
            
    except Exception as e:
        print(f"Error getting leaderboard: {e}")
        return {"success": False, "error": "Failed to get leaderboard"}

@app.get("/api/miner/stats/{user_id}")
async def get_miner_user_stats(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        url = f"{SUPABASE_URL}/rest/v1/nodeon_miner_stats?user_id=eq.{user_id}&select=*"
        headers = {
            "apikey": SUPABASE_KEY,
            "Authorization": f"Bearer {SUPABASE_KEY}",
            "Content-Type": "application/json"
        }
        
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            if data:
                return {"success": True, "stats": data[0]}
            else:
                return {"success": False, "error": "User stats not found"}
        else:
            print(f"Error getting user stats: {response.status_code}")
            return {"success": False, "error": "Failed to get user stats"}
            
    except Exception as e:
        print(f"Error getting user stats: {e}")
        return {"success": False, "error": "Failed to get user stats"}

async def update_user_balance(user_id: int, new_balance: float):
    """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ ID –≤ –ë–î
        user = await get_user_by_telegram_id(user_id)
        if not user:
            print(f"User with telegram_id {user_id} not found")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        url = f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user['id']}"
        headers = {
            "apikey": SUPABASE_ANON_KEY,
            "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
            "Content-Type": "application/json",
            "Prefer": "return=minimal"
        }
        
        update_data = {
            "balance_ndn": new_balance
        }
        
        response = requests.patch(url, headers=headers, json=update_data)
        
        if response.status_code in [200, 204]:
            print(f"Updated balance for user {user_id} (DB ID: {user['id']}): {new_balance}")
            return True
        else:
            print(f"Error updating balance: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"Error updating user balance: {e}")
        return False

if __name__ == "__main__":
    import uvicorn
    import os
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
