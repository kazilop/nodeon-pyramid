#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
–ó–∞–ø–æ–ª–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö referral_path
"""

import os
import requests
import json
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')

if not SUPABASE_URL or not SUPABASE_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏ SUPABASE_KEY")
    exit(1)

def get_supabase_headers():
    return {
        "apikey": SUPABASE_KEY,
        "Authorization": f"Bearer {SUPABASE_KEY}",
        "Content-Type": "application/json"
    }

def get_all_users():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    response = requests.get(
        f"{SUPABASE_URL}/rest/v1/nodeon_users?select=id,referral_path,is_pro",
        headers=get_supabase_headers()
    )
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {response.status_code}")
        return []

def calculate_referrals_for_user(user_id: int, all_users: List[Dict]) -> Dict[str, Any]:
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    referrals_by_level = {}
    all_referrals = []
    total_referrals = 0
    pro_referrals = 0
    regular_referrals = 0
    
    for user in all_users:
        referral_path = user.get('referral_path', '')
        if not referral_path:
            continue
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å
        path_parts = [int(x) for x in referral_path.rstrip(',').split(',') if x.isdigit()]
        
        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞—à–µ–≥–æ ID –≤ –ø—É—Ç–∏
        if user_id in path_parts:
            user_position = path_parts.index(user_id)
            ref_id = user['id']
            
            if ref_id in path_parts:
                ref_position = path_parts.index(ref_id)
                level = ref_position - user_position
                
                if level > 0:  # –†–µ—Ñ–µ—Ä–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å –≤ –ø—É—Ç–∏
                    if level not in referrals_by_level:
                        referrals_by_level[level] = []
                    
                    referrals_by_level[level].append(ref_id)
                    all_referrals.append(ref_id)
                    total_referrals += 1
                    
                    if user.get('is_pro', False):
                        pro_referrals += 1
                    else:
                        regular_referrals += 1
    
    return {
        'all_referrals': all_referrals,
        'referrals_by_level': referrals_by_level,
        'total_referrals_count': total_referrals,
        'pro_referrals_count': pro_referrals,
        'regular_referrals_count': regular_referrals,
        'total_referral_earnings': 0  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    }

def update_user_referrals(user_id: int, referral_data: Dict[str, Any]):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    update_data = {
        'all_referrals': referral_data['all_referrals'],
        'referrals_by_level': referral_data['referrals_by_level'],
        'total_referrals_count': referral_data['total_referrals_count'],
        'pro_referrals_count': referral_data['pro_referrals_count'],
        'regular_referrals_count': referral_data['regular_referrals_count'],
        'total_referral_earnings': referral_data['total_referral_earnings']
    }
    
    response = requests.patch(
        f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user_id}",
        headers=get_supabase_headers(),
        json=update_data
    )
    
    if response.status_code == 200:
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {user_id}: {referral_data['total_referrals_count']} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}: {response.status_code}")
        return False

def main():
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = get_all_users()
    if not all_users:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updated_count = 0
    for user in all_users:
        user_id = user['id']
        referral_data = calculate_referrals_for_user(user_id, all_users)
        
        if update_user_referrals(user_id, referral_data):
            updated_count += 1
    
    print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("üéâ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

if __name__ == "__main__":
    main()

