#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
"""

import os
import sys
from decimal import Decimal
from sqlalchemy import create_engine, text
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = "postgresql://postgres.nodeon:G-Gje9!Jr4B9-$C@ahxwpzgltlzlvrtrbanm.supabase.co:5432/postgres"
TELEGRAM_BOT_USERNAME = "pro_stars_bot"

def setup_developer_account():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    engine = create_engine(DATABASE_URL)
    
    try:
        developer_telegram_id = 207940967
        
        print(f"üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (ID: {developer_telegram_id})...")
        
        with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = conn.execute(text("""
                SELECT id, telegram_id, first_name, last_name, balance_ndn, is_pro, referral_link 
                FROM nodeon_users 
                WHERE telegram_id = :telegram_id
            """), {"telegram_id": developer_telegram_id})
            
            user_data = result.fetchone()
            
            if not user_data:
                print("üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                conn.execute(text("""
                    INSERT INTO nodeon_users 
                    (telegram_id, username, first_name, last_name, balance_ndn, is_pro, referral_link, inviter_id, created_at, updated_at)
                    VALUES 
                    (:telegram_id, :username, :first_name, :last_name, :balance_ndn, :is_pro, :referral_link, :inviter_id, :created_at, :updated_at)
                """), {
                    "telegram_id": developer_telegram_id,
                    "username": "developer",
                    "first_name": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                    "last_name": "NodeOn",
                    "balance_ndn": 0,
                    "is_pro": False,
                    "referral_link": "",
                    "inviter_id": None,
                    "created_at": datetime.utcnow(),
                    "updated_at": datetime.utcnow()
                })
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = conn.execute(text("""
                    SELECT id FROM nodeon_users WHERE telegram_id = :telegram_id
                """), {"telegram_id": developer_telegram_id})
                user_id = result.fetchone()[0]
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {user_id}")
            else:
                user_id = user_data[0]
                print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω —Å ID: {user_id}")
                print(f"   –ò–º—è: {user_data[2]} {user_data[3]}")
                print(f"   –ë–∞–ª–∞–Ω—Å: {user_data[4]} NDN")
                print(f"   Pro —Å—Ç–∞—Ç—É—Å: {'–î–∞' if user_data[5] else '–ù–µ—Ç'}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Pro —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—á–∏—Å–ª—è–µ–º NDN
            print("üëë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Pro —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—á–∏—Å–ª—è–µ–º 10,000 NDN...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            referral_link = f"https://t.me/{TELEGRAM_BOT_USERNAME}?startapp=dev_{user_id}_{int(datetime.utcnow().timestamp())}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn.execute(text("""
                UPDATE nodeon_users 
                SET is_pro = true, 
                    balance_ndn = balance_ndn + :bonus_amount,
                    referral_link = :referral_link,
                    updated_at = :updated_at
                WHERE id = :user_id
            """), {
                "user_id": user_id,
                "bonus_amount": 10000,
                "referral_link": referral_link,
                "updated_at": datetime.utcnow()
            })
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            conn.execute(text("""
                INSERT INTO nodeon_transactions 
                (user_id, type, amount_ndn, description, created_at)
                VALUES 
                (:user_id, :type, :amount_ndn, :description, :created_at)
            """), {
                "user_id": user_id,
                "type": "developer_bonus",
                "amount_ndn": 10000,
                "description": "–ë–æ–Ω—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É - 10,000 NDN",
                "created_at": datetime.utcnow()
            })
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            conn.execute(text("""
                INSERT INTO nodeon_referral_stats (user_id, level, total_referrals, total_earnings, updated_at)
                SELECT :user_id, level, 0, 0, :updated_at
                FROM generate_series(1, 7) AS level
                WHERE NOT EXISTS (
                    SELECT 1 FROM nodeon_referral_stats WHERE user_id = :user_id
                )
            """), {
                "user_id": user_id,
                "updated_at": datetime.utcnow()
            })
            
            conn.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = conn.execute(text("""
                SELECT first_name, last_name, balance_ndn, is_pro, referral_link 
                FROM nodeon_users 
                WHERE id = :user_id
            """), {"user_id": user_id})
            
            final_data = result.fetchone()
            
            print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {final_data[0]} {final_data[1]}")
            print(f"üÜî Telegram ID: {developer_telegram_id}")
            print(f"üëë Pro —Å—Ç–∞—Ç—É—Å: {'‚úÖ –î–∞' if final_data[3] else '‚ùå –ù–µ—Ç'}")
            print(f"üí∞ –ë–∞–ª–∞–Ω—Å NDN: {final_data[2]}")
            print(f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {final_data[4]}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_account_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    engine = create_engine(DATABASE_URL)
    
    try:
        developer_telegram_id = 207940967
        
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT id, first_name, last_name, balance_ndn, is_pro, referral_link,
                       (SELECT COUNT(*) FROM nodeon_transactions WHERE user_id = nodeon_users.id) as transaction_count
                FROM nodeon_users 
                WHERE telegram_id = :telegram_id
            """), {"telegram_id": developer_telegram_id})
            
            user_data = result.fetchone()
            
            if user_data:
                print(f"\nüìä –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:")
                print(f"üë§ –ò–º—è: {user_data[1]} {user_data[2]}")
                print(f"üÜî Telegram ID: {developer_telegram_id}")
                print(f"üëë Pro —Å—Ç–∞—Ç—É—Å: {'‚úÖ –î–∞' if user_data[4] else '‚ùå –ù–µ—Ç'}")
                print(f"üí∞ –ë–∞–ª–∞–Ω—Å NDN: {user_data[3]}")
                print(f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {user_data[5]}")
                print(f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {user_data[6]}")
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

if __name__ == "__main__":
    print("üöÄ NodeOn Pyramid - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å...")
    check_account_status()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    print("\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç...")
    if setup_developer_account():
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        check_account_status()
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.")
