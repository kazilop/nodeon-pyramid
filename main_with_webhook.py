#!/usr/bin/env python3
"""
NodeOn Pyramid API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram webhook –¥–ª—è Stars
"""

from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
import requests
import json
import os
import hashlib
import hmac
import urllib.parse
import time
from datetime import datetime
from typing import Optional, Dict, Any

app = FastAPI(title="NodeOn Pyramid API with Telegram Webhook", version="1.0.0")

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
SUPABASE_URL = "https://ahxwpzgltlzlvrtrbanm.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFoeHdwemdsdGx6bHZydHJiYW5tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk1MDMxNDksImV4cCI6MjA3NTA3OTE0OX0.h4sMVhVwvRUiHgbevDgv9W1G2S__uDWPUSCiXdrEy4E"

# Telegram Bot Token
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7670372637:AAG7XWbNkhvNx_M4MI4118AYXvIsn3bRMDQ")

def get_supabase_headers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è Supabase API"""
    return {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json",
        "Prefer": "return=representation"
    }

def verify_telegram_auth(init_data: str) -> Dict[str, Any]:
    """–°—Ç—Ä–æ–≥–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è Telegram –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∏"""
    try:
        if not init_data or init_data.strip() == "":
            raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram Mini App.")
        
        # URL –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        decoded_data = urllib.parse.unquote(init_data)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = {}
        for item in decoded_data.split('&'):
            if '=' in item:
                key, value = item.split('=', 1)
                data[key] = value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è Telegram
        required_fields = ['user', 'auth_date', 'hash']
        for field in required_fields:
            if field not in data:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ Telegram: {field}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º user –¥–∞–Ω–Ω—ã–µ
        try:
            user_data = json.loads(data['user'])
            if 'id' not in user_data:
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram")
        except json.JSONDecodeError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_date (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        try:
            auth_date = int(data['auth_date'])
            if datetime.now().timestamp() - auth_date > 86400:  # 24 —á–∞—Å–∞
                raise ValueError("–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")
        except ValueError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        # –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–û–î–ü–ò–°–ò TELEGRAM
        if not verify_telegram_signature(init_data):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram –¥–∞–Ω–Ω—ã—Ö")
        
        print(f"‚úÖ Successfully verified Telegram user: {user_data.get('first_name')} (@{user_data.get('username')}) ID: {user_data.get('id')}")
        return user_data
        
    except Exception as e:
        print(f"‚ùå Telegram auth error: {e}")
        raise ValueError(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram: {str(e)}")

def verify_telegram_signature(init_data: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        data = {}
        for item in init_data.split('&'):
            if '=' in item:
                key, value = item.split('=', 1)
                data[key] = value
        
        if 'hash' not in data:
            return False
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º hash
        received_hash = data.pop('hash')
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(data.items())])
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        secret_key = hmac.new(
            "WebAppData".encode(),
            TELEGRAM_BOT_TOKEN.encode(),
            hashlib.sha256
        ).digest()
        
        # –í—ã—á–∏—Å–ª—è–µ–º hash
        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º hash
        return hmac.compare_digest(received_hash, calculated_hash)
        
    except Exception as e:
        print(f"‚ùå Signature verification error: {e}")
        return False

def get_or_create_user(telegram_user: Dict[str, Any], referral_token: str = None) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase"""
    telegram_id = telegram_user.get('id')
    if not telegram_id:
        raise HTTPException(status_code=400, detail="Invalid user data")
    
    headers = get_supabase_headers()
    
    try:
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{telegram_id}",
            headers=headers
        )
        
        if response.status_code == 200:
            users = response.json()
            if users:
                user = users[0]
                print(f"‚úÖ Existing user found: {user['first_name']} (ID: {user['id']})")
                return user
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "telegram_id": telegram_id,
            "username": telegram_user.get('username'),
            "first_name": telegram_user.get('first_name'),
            "last_name": telegram_user.get('last_name'),
            "balance_ndn": 0.0,
            "balance_stars": 0.0,
            "total_stars_earned": 0.0,
            "total_stars_spent": 0.0,
            "is_pro": False,
            "referral_link": "",
            "inviter_id": None,
            "referral_path": "",
            "referral_level": 0,
            "is_active": True
        }
        
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/nodeon_users",
            headers=headers,
            json=user_data
        )
        
        if response.status_code == 201:
            created_user = response.json()[0]
            print(f"‚úÖ New user created: {created_user['first_name']} (ID: {created_user['id']})")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            for level in range(1, 8):
                stats_data = {
                    "user_id": created_user["id"],
                    "level": level,
                    "total_referrals": 0,
                    "total_earnings": 0.0
                }
                
                requests.post(
                    f"{SUPABASE_URL}/rest/v1/nodeon_referral_stats",
                    headers=headers,
                    json=stats_data
                )
            
            return created_user
        else:
            print(f"‚ùå Failed to create user: {response.text}")
            raise HTTPException(status_code=500, detail="Database error")
            
    except Exception as e:
        print(f"‚ùå Database error: {e}")
        raise HTTPException(status_code=500, detail="Database error")

@app.get("/")
async def root():
    return {"message": "NodeOn Pyramid API with Telegram Webhook", "status": "running"}

@app.get("/api/test")
async def api_test_endpoint():
    return {"message": "Supabase API with Telegram Webhook is working", "status": "ok"}

@app.post("/webhook")
async def telegram_webhook(request: Request):
    """Webhook –¥–ª—è Telegram –±–æ—Ç–∞"""
    try:
        data = await request.json()
        print(f"üì® Received webhook: {json.dumps(data, indent=2)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if 'message' in data:
            await handle_message(data['message'])
        elif 'callback_query' in data:
            await handle_callback_query(data['callback_query'])
        elif 'pre_checkout_query' in data:
            await handle_pre_checkout_query(data['pre_checkout_query'])
        
        return {"ok": True}
        
    except Exception as e:
        print(f"‚ùå Webhook error: {e}")
        return {"ok": False, "error": str(e)}

async def handle_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if 'successful_payment' in message:
        await handle_successful_payment(message)

async def handle_successful_payment(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment = message['successful_payment']
        user = message['from']
        
        print(f"üí∞ Successful payment from user {user['id']}: {payment}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
        result = await process_telegram_payment(payment, user)
        
        if result['success']:
            print(f"‚úÖ Payment processed successfully: {result}")
        else:
            print(f"‚ùå Payment processing failed: {result}")
            
    except Exception as e:
        print(f"‚ùå Error handling successful payment: {e}")

async def process_telegram_payment(payment, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Telegram"""
    try:
        user_id = user['id']
        telegram_payment_charge_id = payment['telegram_payment_charge_id']
        total_amount = payment['total_amount']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ NDN (1 Star = 1 NDN)
        stars_amount = total_amount / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∫–æ–ø–µ–µ–∫
        ndn_amount = stars_amount
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        purchase_response = requests.post(
            f"{SUPABASE_URL}/rest/v1/rpc/process_stars_purchase",
            headers=get_supabase_headers(),
            json={
                "p_user_id": user_id,
                "p_stars_amount": stars_amount,
                "p_ndn_amount": ndn_amount,
                "p_payment_id": telegram_payment_charge_id
            }
        )
        
        if purchase_response.status_code == 200:
            data = purchase_response.json()
            if data.get('success'):
                return {
                    "success": True,
                    "ndn_amount": ndn_amount,
                    "stars_amount": stars_amount,
                    "transaction_id": data.get('transaction_id')
                }
            else:
                return {"success": False, "message": data.get('error')}
        else:
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"}
            
    except Exception as e:
        print(f"‚ùå Error processing payment: {e}")
        return {"success": False, "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞"}

async def handle_callback_query(callback_query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query"""
    print(f"üîò Callback query: {callback_query}")

async def handle_pre_checkout_query(pre_checkout_query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout query"""
    print(f"üí≥ Pre-checkout query: {pre_checkout_query}")

@app.get("/api/user/profile")
async def get_user_profile(init_data: str = None, referral_token: str = None):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Telegram"""
    try:
        if not init_data or init_data.strip() == "":
            raise HTTPException(status_code=401, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram Mini App.")
        
        telegram_user = verify_telegram_auth(init_data)
        user = get_or_create_user(telegram_user, referral_token)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        headers = get_supabase_headers()
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_referral_stats?user_id=eq.{user['id']}",
            headers=headers
        )
        
        referral_stats = []
        if response.status_code == 200:
            referral_stats = response.json()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è Pro –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        referral_link = None
        if user.get('is_pro'):
            referral_link = f"https://t.me/pro_stars_bot?startapp=ref_{user['id']}"
        
        return {
            "success": True,
            "user": {
                "id": user['id'],
                "telegram_id": user['telegram_id'],
                "username": user.get('username'),
                "first_name": user.get('first_name'),
                "last_name": user.get('last_name'),
                "balance_ndn": float(user.get('balance_ndn', 0)),
                "balance_stars": float(user.get('balance_stars', 0)),
                "total_stars_earned": float(user.get('total_stars_earned', 0)),
                "total_stars_spent": float(user.get('total_stars_spent', 0)),
                "is_pro": user.get('is_pro', False),
                "referral_link": referral_link,
                "created_at": user.get('created_at')
            },
            "referral_stats": referral_stats
        }
        
    except ValueError as e:
        raise HTTPException(status_code=401, detail=str(e))
    except Exception as e:
        print(f"Error getting user profile: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/wallet/balance")
async def get_server_wallet_balance():
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
    try:
        headers = get_supabase_headers()
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/rpc/get_server_wallet_balance",
            headers=headers,
            json={}
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                return data
            else:
                return {"success": False, "error": data.get('error')}
        else:
            return {"success": False, "error": "Failed to get wallet balance"}
            
    except Exception as e:
        print(f"Error getting wallet balance: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/stats/leaderboard")
async def get_leaderboard():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
    try:
        headers = get_supabase_headers()
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?is_active=eq.true&order=balance_ndn.desc&limit=10",
            headers=headers
        )
        
        if response.status_code == 200:
            users = response.json()
            leaders = []
            for i, user in enumerate(users, 1):
                leaders.append({
                    "rank": i,
                    "first_name": user.get('first_name'),
                    "username": user.get('username'),
                    "balance_ndn": float(user.get('balance_ndn', 0)),
                    "balance_stars": float(user.get('balance_stars', 0)),
                    "is_pro": user.get('is_pro', False)
                })
            
            return {
                "success": True,
                "leaders": leaders
            }
        else:
            return {"success": False, "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–æ–≤"}
            
    except Exception as e:
        print(f"Error getting leaderboard: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
