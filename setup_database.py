#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
–ó–∞–ø—É—Å–∫–∞—Ç—å –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –Ω–∞ Railway
"""

import os
import requests
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_ANON_KEY = os.getenv('SUPABASE_ANON_KEY')

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ Supabase"""
    
    if not SUPABASE_URL or not SUPABASE_ANON_KEY:
        print("‚ùå SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return False
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    sql_commands = [
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        CREATE TABLE IF NOT EXISTS nodeon_users (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT UNIQUE NOT NULL,
            username VARCHAR(255),
            first_name VARCHAR(255),
            last_name VARCHAR(255),
            balance_ndn DECIMAL(15,2) DEFAULT 0.0,
            balance_stars DECIMAL(15,2) DEFAULT 0.0,
            is_pro BOOLEAN DEFAULT FALSE,
            referral_link VARCHAR(255) UNIQUE,
            inviter_id INTEGER REFERENCES nodeon_users(id),
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW()
        );
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        """
        CREATE TABLE IF NOT EXISTS nodeon_transactions (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES nodeon_users(id),
            type VARCHAR(50) NOT NULL,
            amount_ndn DECIMAL(15,2) DEFAULT 0.0,
            amount_stars DECIMAL(15,2) DEFAULT 0.0,
            description TEXT,
            referral_level INTEGER,
            created_at TIMESTAMP DEFAULT NOW()
        );
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        """
        CREATE TABLE IF NOT EXISTS nodeon_referral_stats (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES nodeon_users(id),
            level INTEGER NOT NULL,
            total_referrals INTEGER DEFAULT 0,
            total_earnings DECIMAL(15,2) DEFAULT 0.0,
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW()
        );
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–π–Ω–µ—Ä–∞
        """
        CREATE TABLE IF NOT EXISTS nodeon_miner_data (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES nodeon_users(id),
            miner_data JSONB NOT NULL,
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW()
        );
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞–π–Ω–µ—Ä–∞
        """
        CREATE TABLE IF NOT EXISTS nodeon_miner_stats (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES nodeon_users(id),
            total_gas_earned DECIMAL(15,2) DEFAULT 0.0,
            total_farms INTEGER DEFAULT 0,
            total_upgrades INTEGER DEFAULT 0,
            level INTEGER DEFAULT 1,
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW()
        );
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        """
        CREATE TABLE IF NOT EXISTS nodeon_achievements (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES nodeon_users(id),
            achievement_id VARCHAR(100) NOT NULL,
            unlocked_at TIMESTAMP DEFAULT NOW(),
            UNIQUE(user_id, achievement_id)
        );
        """,
        
        # –¢–∞–±–ª–∏—Ü–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        """
        CREATE TABLE IF NOT EXISTS nodeon_shops (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES nodeon_users(id),
            shop_data JSONB NOT NULL,
            created_at TIMESTAMP DEFAULT NOW(),
            updated_at TIMESTAMP DEFAULT NOW()
        );
        """
    ]
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ Supabase...")
    
    for i, sql in enumerate(sql_commands, 1):
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º SQL —á–µ—Ä–µ–∑ REST API
            url = f"{SUPABASE_URL}/rest/v1/rpc/exec_sql"
            data = {"sql": sql}
            
            response = requests.post(url, headers=headers, json=data)
            
            if response.status_code in [200, 201]:
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {i} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {i}: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {i}: {e}")
    
    print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def create_developer_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    
    developer_id = os.getenv('DEVELOPER_TELEGRAM_ID')
    if not developer_id:
        print("‚ö†Ô∏è DEVELOPER_TELEGRAM_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        return
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    # –î–∞–Ω–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    developer_data = {
        "telegram_id": int(developer_id),
        "username": "developer",
        "first_name": "Developer",
        "balance_ndn": 1000000.0,  # 1 –º–∏–ª–ª–∏–æ–Ω NDN –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        "balance_stars": 10000.0,  # 10 —Ç—ã—Å—è—á Stars
        "is_pro": True,
        "referral_link": "developer"
    }
    
    try:
        url = f"{SUPABASE_URL}/rest/v1/nodeon_users"
        response = requests.post(url, headers=headers, json=developer_data)
        
        if response.status_code in [200, 201]:
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–∑–¥–∞–Ω: {developer_id}")
        else:
            print(f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö NodeOn Pyramid")
    print("=" * 50)
    
    create_tables()
    create_developer_user()
    
    print("=" * 50)
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ:")
    print("   1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram Bot")
    print("   2. –û–±–Ω–æ–≤–∏—Ç—å webhook URL")
    print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É API")
