#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ Supabase API
"""

import requests
import json
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase
SUPABASE_URL = "https://ahxwpzgltlzlvrtrbanm.supabase.co"
SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFoeHdwemdsdGx6bHZydHJiYW5tIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk1MDMxNDksImV4cCI6MjA3NTA3OTE0OX0.h4sMVhVwvRUiHgbevDgv9W1G2S__uDWPUSCiXdrEy4E"

DEVELOPER_TELEGRAM_ID = 207940967

def setup_developer_via_supabase():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ Supabase API"""
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ Supabase...")
        
        # 1. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üë§ –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        user_data = {
            "telegram_id": DEVELOPER_TELEGRAM_ID,
            "username": "developer",
            "first_name": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "last_name": "NodeOn",
            "balance_ndn": 10000.00,
            "is_pro": True,
            "referral_link": f"https://t.me/pro_stars_bot?startapp=dev_{DEVELOPER_TELEGRAM_ID}",
            "inviter_id": None,
            "created_at": "2024-01-01T00:00:00Z",
            "updated_at": "2024-01-01T00:00:00Z"
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/nodeon_users",
            headers=headers,
            json=user_data
        )
        
        if response.status_code == 201:
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
            user_id = response.json()[0]["id"]
        elif response.status_code == 409:  # –ö–æ–Ω—Ñ–ª–∏–∫—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            print("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = requests.get(
                f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{DEVELOPER_TELEGRAM_ID}",
                headers=headers
            )
            
            if response.status_code == 200:
                user_id = response.json()[0]["id"]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                update_data = {
                    "balance_ndn": 10000.00,
                    "is_pro": True,
                    "referral_link": f"https://t.me/pro_stars_bot?startapp=dev_{DEVELOPER_TELEGRAM_ID}",
                    "updated_at": "2024-01-01T00:00:00Z"
                }
                
                response = requests.patch(
                    f"{SUPABASE_URL}/rest/v1/nodeon_users?id=eq.{user_id}",
                    headers=headers,
                    json=update_data
                )
                
                if response.status_code == 200:
                    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.text}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.text}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {response.text}")
            return False
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        print("üí∞ –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–æ–Ω—É—Å–∞...")
        
        transaction_data = {
            "user_id": user_id,
            "type": "developer_bonus",
            "amount_ndn": 10000.00,
            "description": "–ë–æ–Ω—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É - 10,000 NDN",
            "created_at": "2024-01-01T00:00:00Z"
        }
        
        response = requests.post(
            f"{SUPABASE_URL}/rest/v1/nodeon_transactions",
            headers=headers,
            json=transaction_data
        )
        
        if response.status_code == 201:
            print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {response.text}")
        
        # 3. –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        print("üìä –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...")
        
        for level in range(1, 8):
            stats_data = {
                "user_id": user_id,
                "level": level,
                "total_referrals": 0,
                "total_earnings": 0.00,
                "updated_at": "2024-01-01T00:00:00Z"
            }
            
            response = requests.post(
                f"{SUPABASE_URL}/rest/v1/nodeon_referral_stats",
                headers=headers,
                json=stats_data
            )
            
            if response.status_code == 201:
                print(f"   –£—Ä–æ–≤–µ–Ω—å {level}: ‚úÖ")
            else:
                print(f"   –£—Ä–æ–≤–µ–Ω—å {level}: ‚ùå {response.text}")
        
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ NodeOn")
        print(f"üÜî Telegram ID: {DEVELOPER_TELEGRAM_ID}")
        print(f"üëë Pro —Å—Ç–∞—Ç—É—Å: ‚úÖ –î–∞")
        print(f"üí∞ –ë–∞–ª–∞–Ω—Å: 10,000 NDN")
        print(f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/pro_stars_bot?startapp=dev_{DEVELOPER_TELEGRAM_ID}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def check_developer_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    
    headers = {
        "apikey": SUPABASE_ANON_KEY,
        "Authorization": f"Bearer {SUPABASE_ANON_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
        
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/nodeon_users?telegram_id=eq.{DEVELOPER_TELEGRAM_ID}",
            headers=headers
        )
        
        if response.status_code == 200:
            users = response.json()
            if users:
                user = users[0]
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:")
                print(f"   ID: {user['id']}")
                print(f"   –ò–º—è: {user['first_name']} {user['last_name']}")
                print(f"   –ë–∞–ª–∞–Ω—Å: {user['balance_ndn']} NDN")
                print(f"   Pro: {'–î–∞' if user['is_pro'] else '–ù–µ—Ç'}")
                print(f"   –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {user['referral_link']}")
                return True
            else:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def main():
    print("üöÄ NodeOn Pyramid - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑ Supabase")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å...")
    check_developer_status()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
    print("\n2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç...")
    if setup_developer_via_supabase():
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        check_developer_status()
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram!")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.")

if __name__ == "__main__":
    main()
